parameters:
  vmImage: ''

jobs:
- job: Wasm_UITests_Build
  displayName: 'Build WebAssembly SamplesApp UI Tests'
  container: nv-bionic-wasm

  pool: ${{ parameters.poolName }}

  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget

    # Only build for NetPrevious
    UnoDisableNetCurrentMobile: true
    UnoDisableNetCurrent: true

  strategy:
    matrix:
      UWP:
        UNO_UWP_BUILD: true
        XAML_FLAVOR_BUILD: UWP

      WinUI:
        UNO_UWP_BUILD: false
        XAML_FLAVOR_BUILD: WinUI

  steps:
  - checkout: self
    clean: true

  - template: templates/download-winui-converted-tree.yml

  - template: templates/gitversion.yml
  - template: templates/dotnet-install.yml

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - bash: |
      dotnet msbuild /r /nr:false /p:Configuration=Release src/SamplesApp/SamplesApp.Wasm/SamplesApp.Wasm.csproj /bl:$(build.artifactstagingdirectory)/build-wasm-uitest-net6-$(GitVersion.FullSemVer).binlog

    displayName: 'Build sample app (net7.0)'

  - task: CopyFiles@2
    displayName: 'Publish Wasm Site (net7.0)'
    inputs:
      SourceFolder: $(build.sourcesdirectory)/src/SamplesApp/SamplesApp.Wasm/bin/Release/net7.0/dist
      Contents: '**/*.*'
      TargetFolder: $(build.artifactstagingdirectory)/site-net7.0-$(XAML_FLAVOR_BUILD)
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: wasm-uitest-binaries
      ArtifactType: Container


- job: Wasm_UITests_Snap
  displayName: 'Run WebAssembly Snapshots Tests'
  dependsOn:
  - Wasm_UITests_Build

  container: nv-bionic-wasm

  pool: ${{ parameters.poolName }}

  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget
    SITE_SUFFIX: 'net7.0'

  steps:
  - checkout: self
    clean: true

  - template: templates/dotnet-install.yml

  - task: DownloadBuildArtifacts@0
    inputs:
        artifactName: wasm-uitest-binaries
        downloadPath: '$(build.sourcesdirectory)/build'

  - bash: |
      set -euo pipefail
      set -x
      IFS=$'\n\t'
      dotnet tool uninstall dotnet-serve -g || true
      dotnet tool uninstall dotnet-serve --tool-path $BUILD_SOURCESDIRECTORY/build/tools || true
      dotnet tool install dotnet-serve --version 1.10.140 --tool-path $BUILD_SOURCESDIRECTORY/build/tools || true
      export PATH="$PATH:$BUILD_SOURCESDIRECTORY/build/tools"
      $BUILD_SOURCESDIRECTORY/build/tools/dotnet-serve -p 8000 -d "$BUILD_SOURCESDIRECTORY/build/wasm-uitest-binaries/site-net7.0-UWP" &
      cd $BUILD_SOURCESDIRECTORY/src/SamplesApp/SamplesApp.Wasm.UITests
      npm install
      node app

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"
      SITE_SUFFIX: "$(SITE_SUFFIX)"

    displayName: 'Running UI Tests'

  - task: CopyFiles@2
    displayName: 'Publish Wasm Tests results'
    inputs:
      SourceFolder: $(build.sourcesdirectory)/src/SamplesApp/SamplesApp.Wasm.UITests/out
      Contents: '**/*.*'
      TargetFolder: $(build.artifactstagingdirectory)/screenshots/wasm
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uitests-results
      ArtifactType: Container


- job: Wasm_UITests_Automated
  displayName: ' WebAssembly Tests'
  dependsOn:
  - Wasm_UITests_Build

  container: nv-bionic-wasm

  strategy:
    matrix:
      net7_default:
        SITE_SUFFIX: 'net7.0-UWP'
        UITEST_AUTOMATED_GROUP: 'Default'
        UITEST_TEST_TIMEOUT: '120s'

      net7_benchmarks:
        SITE_SUFFIX: 'net7.0-UWP'
        UITEST_AUTOMATED_GROUP: 'Benchmarks'
        UITEST_TEST_TIMEOUT: '120s'

      net7_uwp_runtimetests_group_00:
        SITE_SUFFIX: 'net7.0-UWP'
        UITEST_AUTOMATED_GROUP: 'RuntimeTests'
        UITEST_TEST_TIMEOUT: '1800s'
        UITEST_RUNTIME_TEST_GROUP: 0
        UITEST_RUNTIME_TEST_GROUP_COUNT: 3

      net7_uwp_runtimetests_group_01:
        SITE_SUFFIX: 'net7.0-UWP'
        UITEST_AUTOMATED_GROUP: 'RuntimeTests'
        UITEST_TEST_TIMEOUT: '1800s'
        UITEST_RUNTIME_TEST_GROUP: 1
        UITEST_RUNTIME_TEST_GROUP_COUNT: 3

      net7_uwp_runtimetests_group_02:
        SITE_SUFFIX: 'net7.0-UWP'
        UITEST_AUTOMATED_GROUP: 'RuntimeTests'
        UITEST_TEST_TIMEOUT: '1800s'
        UITEST_RUNTIME_TEST_GROUP: 2
        UITEST_RUNTIME_TEST_GROUP_COUNT: 3

      net7_winui_runtimetests_group_00:
        SITE_SUFFIX: 'net7.0-WinUI'
        UITEST_AUTOMATED_GROUP: 'RuntimeTests'
        UITEST_TEST_TIMEOUT: '1800s'
        UITEST_RUNTIME_TEST_GROUP: 0
        UITEST_RUNTIME_TEST_GROUP_COUNT: 3

      net7_winui_runtimetests_group_01:
        SITE_SUFFIX: 'net7.0-WinUI'
        UITEST_AUTOMATED_GROUP: 'RuntimeTests'
        UITEST_TEST_TIMEOUT: '1800s'
        UITEST_RUNTIME_TEST_GROUP: 1
        UITEST_RUNTIME_TEST_GROUP_COUNT: 3

      net7_winui_runtimetests_group_02:
        SITE_SUFFIX: 'net7.0-WinUI'
        UITEST_AUTOMATED_GROUP: 'RuntimeTests'
        UITEST_TEST_TIMEOUT: '1800s'
        UITEST_RUNTIME_TEST_GROUP: 2
        UITEST_RUNTIME_TEST_GROUP_COUNT: 3

  pool: ${{ parameters.poolName }}

  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget

  steps:
  - checkout: self
    clean: true

  - template: templates/dotnet-install.yml

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - task: DownloadBuildArtifacts@0
    inputs:
        artifactName: wasm-uitest-binaries
        downloadPath: '$(build.sourcesdirectory)/build'

  - task: DownloadBuildArtifacts@0
    condition: gt(variables['System.JobAttempt'], 1)
    continueOnError: true
    displayName: Download previous test runs failed tests
    inputs:
        artifactName: uitests-failure-results
        downloadPath: '$(build.sourcesdirectory)/build'

   ## First ui tests run
  - bash: |
      chmod +x $BUILD_SOURCESDIRECTORY/build/test-scripts/wasm-run-automated-uitests.sh
      $BUILD_SOURCESDIRECTORY/build/test-scripts/wasm-run-automated-uitests.sh

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"
      UITEST_TEST_TIMEOUT: "$(UITEST_TEST_TIMEOUT)"
      SITE_SUFFIX: "$(SITE_SUFFIX)"

    displayName: 'Running UI Tests'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult-original.xml'
      testRunTitle: 'WebAssembly Test Run $(SITE_SUFFIX)'
      testResultsFormat: 'NUnit'
      failTaskOnFailedTests: false
      searchFolder: '$(build.artifactstagingdirectory)/screenshots/wasm-automated' # https://github.com/microsoft/azure-pipelines-tasks/issues/10072

   ## Second ui tests run
  - bash: |
      chmod +x $BUILD_SOURCESDIRECTORY/build/test-scripts/wasm-run-automated-uitests.sh
      $BUILD_SOURCESDIRECTORY/build/test-scripts/wasm-run-automated-uitests.sh

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"
      SITE_SUFFIX: "$(SITE_SUFFIX)"

    displayName: 'Running UI Tests'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult-original.xml'
      testRunTitle: 'WebAssembly Test Run $(SITE_SUFFIX)'
      testResultsFormat: 'NUnit'
      failTaskOnFailedTests: true
      searchFolder: '$(build.artifactstagingdirectory)/screenshots/wasm-automated' # https://github.com/microsoft/azure-pipelines-tasks/issues/10072

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '$(build.sourcesdirectory)/build/RuntimeTestResults*.xml'
      testRunTitle: 'WebAssembly Runtime Tests Run $(SITE_SUFFIX)'
      testResultsFormat: 'NUnit'
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uitests-results
      ArtifactType: Container

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/build/uitests-failure-results
      ArtifactName: uitests-failure-results
      ArtifactType: Container
