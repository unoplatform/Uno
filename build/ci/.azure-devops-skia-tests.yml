parameters:
  vmImage: ''
  vmMacImage: ''
  poolName: ''

jobs:
- job: Skia_Tests_Build
  displayName: 'Build Skia Samples App UI Tests'
  timeoutInMinutes: 60

  pool: ${{ parameters.poolName }}

  variables:
    CombinedConfiguration: Release|Any CPU
    CI_Build: true
    GTK_RUNTIME_URL: https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases/download/2020-07-15/gtk3-runtime-3.24.20-2020-07-15-ts-win64.exe

    # Use pre-defined local nuget cache for restore
    NUGET_PACKAGES: 'C:\NugetPackages'

    # Only build for NetPrevious
    UnoDisableNetCurrentMobile: true
    UnoDisableNetCurrent: true

  strategy:
    matrix:
      UWP:
        UNO_UWP_BUILD: true
        XAML_FLAVOR_BUILD: UWP

      WinUI:
        UNO_UWP_BUILD: false
        XAML_FLAVOR_BUILD: WinUI

  steps:
  - checkout: self
    clean: true

  - template: templates/download-winui-converted-tree.yml

  - template: templates/gitversion.yml
  - template: templates/dotnet-install.yml

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - powershell: dotnet msbuild src/SamplesApp/SamplesApp.Skia.Gtk/SamplesApp.Skia.Gtk.csproj /r /m /p:Configuration=Release /detailedsummary /m /bl:$(build.artifactstagingdirectory)\build-gtk.binlog
    displayName: Build GTK Head

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\src\SamplesApp\SamplesApp.Skia.Gtk\bin\Release\net7.0
      ArtifactName: skia-gtk-samples-app-$(XAML_FLAVOR_BUILD)
      ArtifactType: Container

  - powershell: dotnet msbuild src/SamplesApp/SamplesApp.Skia.WPF/SamplesApp.Skia.WPF.csproj /r /m /p:Configuration=Release /detailedsummary /m /bl:$(build.artifactstagingdirectory)\build-wpf.binlog
    displayName: Build WPF Head

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\src\SamplesApp\SamplesApp.Skia.WPF\bin\Release\net7.0-windows
      ArtifactName: skia-wpf-samples-app-$(XAML_FLAVOR_BUILD)
      ArtifactType: Container

  - powershell: dotnet msbuild src/SamplesApp/UnoIslandsSamplesApp.Skia.WPF/UnoIslandsSamplesApp.Skia.Wpf.csproj /r /m /p:Configuration=Release /detailedsummary /m /bl:$(build.artifactstagingdirectory)\build-wpf-islands.binlog
    displayName: Build WPF Islands Head

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\src\SamplesApp\UnoIslandsSamplesApp.Skia.WPF\bin\Release\net7.0-windows
      ArtifactName: uno-islands-skia-wpf-samples-app-$(XAML_FLAVOR_BUILD)
      ArtifactType: Container

  - powershell: dotnet publish src/SamplesApp/SamplesApp.Skia.Linux.FrameBuffer/SamplesApp.Skia.Linux.FrameBuffer.csproj -c Release -f net7.0 /bl:$(build.artifactstagingdirectory)\build-framebuffer.binlog
    displayName: Build Framebuffer Head

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\src\SamplesApp\SamplesApp.Skia.Linux.FrameBuffer\bin\Release\net7.0
      ArtifactName: skia-framebuffer-samples-app-$(XAML_FLAVOR_BUILD)
      ArtifactType: Container

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: skia-samples-app-binlog
      ArtifactType: Container

##
## GTK
##

- job: Skia_Gtk_Screenshot_Tests
  displayName: 'Run Skia GTK Snapshot Tests'
  timeoutInMinutes: 60

  pool:
    vmImage: ${{ parameters.vmMacImage }}

  dependsOn: Skia_Tests_Build

  variables:
    SamplesAppArtifactName: skia-gtk-samples-app-UWP
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
        artifactName: $(SamplesAppArtifactName)
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml
  - template: templates/gtk-install-macos.yml

  - script: |
        cd $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)
        dotnet SamplesApp.Skia.Gtk.dll --auto-screenshots=$(build.artifactstagingdirectory)/screenshots/skia-gtk-screenshots

    displayName: Run Skia GTK Snapshot Tests

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uitests-results
      ArtifactType: Container

- job: Skia_Gtk_Runtime_Tests_Build
  displayName: 'Run Skia GTK Runtime Tests'
  timeoutInMinutes: 60

  pool:
    vmImage: ${{ parameters.vmMacImage }}

  strategy:
    matrix:
      UWP:
        UNO_UWP_BUILD: true
        XAML_FLAVOR_BUILD: UWP

      WinUI:
        UNO_UWP_BUILD: false
        XAML_FLAVOR_BUILD: WinUI

  dependsOn: Skia_Tests_Build

  variables:
    SamplesAppArtifactName: skia-gtk-samples-app-$(XAML_FLAVOR_BUILD)
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)
    UnoEnableHRuntimeTests: true

    # Only build for NetPrevious
    UnoDisableNetCurrentMobile: true
    UnoDisableNetCurrent: true

  steps:

  - template: templates/download-winui-converted-tree.yml

  - task: DownloadBuildArtifacts@0
    inputs:
        artifactName: $(SamplesAppArtifactName)
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml
  - template: templates/gtk-install-macos.yml

  - script: |
      # Build source generators for hot reload runtime tests
      # Used to build the hot reload test secondary app during runtime tests
      cd $(build.sourcesdirectory)/src/SourceGenerators/Uno.UI.Tasks
      dotnet build -c Debug
      cd $(build.sourcesdirectory)/src/SourceGenerators/Uno.UI.SourceGenerators
      dotnet build -c Debug
      cd $(build.sourcesdirectory)/src/Uno.UI.RemoteControl.Host
      dotnet build -c Debug -p:UnoDisableNet8=true
    displayName: Build HR dependencies

  - script: |
        cd $(SamplesAppArtifactPath)
        dotnet SamplesApp.Skia.Gtk.dll --runtime-tests=$(build.sourcesdirectory)/build/skia-gtk-runtime-tests-results.xml

    displayName: Run Skia GTK $(XAML_FLAVOR_BUILD) Runtime Tests
    env:
      UnoEnableHRuntimeTests: $(UnoEnableHRuntimeTests)
      SamplesAppArtifactPath: $(SamplesAppArtifactPath)
      SamplesAppArtifactName: $(SamplesAppArtifactName)

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'Skia GTK $(XAML_FLAVOR_BUILD) Runtime Tests'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/skia-gtk-runtime-tests-results.xml'
      failTaskOnFailedTests: true

##
## WPF
##

- job: Skia_Wpf_Screenshot_Tests
  displayName: 'Run Skia WPF Snapshot Tests'
  timeoutInMinutes: 60

  pool:
    vmImage: ${{ parameters.vmImage }}

  dependsOn: Skia_Tests_Build

  variables:
    SamplesAppArtifactName: skia-wpf-samples-app-UWP
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
        artifactName: $(SamplesAppArtifactName)
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml

  - script: |
        cd $(SamplesAppArtifactPath)
        dotnet SamplesApp.Skia.Wpf.dll --auto-screenshots=$(build.artifactstagingdirectory)/screenshots/skia-wpf-screenshots

    displayName: Run Skia WPF Snapshot Tests

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uitests-results
      ArtifactType: Container

- job: Skia_Wpf_Runtime_Tests_Build
  displayName: 'Run Skia WPF Runtime Tests'
  timeoutInMinutes: 60

  pool:
    vmImage: ${{ parameters.vmImage }}

  strategy:
    matrix:
      UWP:
        UNO_UWP_BUILD: true
        XAML_FLAVOR_BUILD: UWP

      WinUI:
        UNO_UWP_BUILD: false
        XAML_FLAVOR_BUILD: WinUI

  dependsOn: Skia_Tests_Build

  variables:
    SamplesAppArtifactName: skia-wpf-samples-app-$(XAML_FLAVOR_BUILD)
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
        artifactName: $(SamplesAppArtifactName)
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml

  - script: |
        cd $(SamplesAppArtifactPath)
        dotnet SamplesApp.Skia.Wpf.dll --runtime-tests=$(build.sourcesdirectory)/build/skia-wpf-runtime-tests-results.xml

    displayName: Run Skia WPF $(XAML_FLAVOR_BUILD) Runtime Tests

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'Skia WPF $(XAML_FLAVOR_BUILD) Runtime Tests'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/skia-wpf-runtime-tests-results.xml'
      failTaskOnFailedTests: true

- job: Uno_Islands_Skia_Wpf_Runtime_Tests_Build
  displayName: 'Run Uno Islands Skia WPF Runtime Tests'
  timeoutInMinutes: 45

  pool:
    vmImage: ${{ parameters.vmImage }}

  dependsOn: Skia_Tests_Build

  variables:
    SamplesAppArtifactName: uno-islands-skia-wpf-samples-app-UWP
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
        artifactName: $(SamplesAppArtifactName)
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml

  - script: |
        cd $(SamplesAppArtifactPath)
        dotnet UnoIslandsSamplesApp.Skia.Wpf.dll --runtime-tests=$(build.sourcesdirectory)/build/uno-islands-skia-wpf-runtime-tests-results.xml

    displayName: Run Uno Islands Skia WPF Runtime Tests

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'Uno Islands Skia WPF Runtime Tests'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/uno-islands-skia-wpf-runtime-tests-results.xml'
      failTaskOnFailedTests: true
