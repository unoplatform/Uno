parameters:
  poolName: ''

jobs:
- job: generic_win_build
  displayName: 'Build Generic Binaries'
  timeoutInMinutes: 90
  
  dependsOn: Pipeline_Validations

  pool: ${{ parameters.poolName }}

  strategy:
    matrix:
      UWP:
        UNO_UWP_BUILD: true
        XAML_FLAVOR_BUILD: UWP 

      WinUI:
        UNO_UWP_BUILD: false
        XAML_FLAVOR_BUILD: WinUI 

  variables:
    CombinedConfiguration: Release|Any CPU
    CI_Build: true

    # Disable .NET 5 build on CI for package generation
    # Build validation is performed on other jobs
    UnoUIDisableNetCoreBuild: true

    # This is required to be able to use hard links as much as possible
    NUGET_PACKAGES: $(Agent.WorkFolder)\.nuget

  steps:
  - checkout: self
    clean: true

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - template: templates/gitversion.yml
   
  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: 4.9.1
      checkLatest: false

  # Required to run the api comparison tool
  - task: UseDotNet@2
    displayName: 'Use .Net Core runtime 2.2.x'
    inputs:
      packageType: runtime
      version: 2.2.x

  - template: templates/dotnet-install.yml

  - powershell: .\build\Install-WindowsSdkISO.ps1 17763
    displayName: Insider SDK
    
  # Required for the Wasm uitests project
  - task: NodeTool@0

  - template: templates/install-windows-sdk.yml
  - template: templates/jdk-setup.yml

  - powershell: |
        cd $(build.sourcesdirectory)\src\Uno.WinUIRevert
        dotnet run "$(build.sourcesdirectory)"

    condition: and(succeeded(), eq(variables['UNO_UWP_BUILD'], 'false'))
    displayName: Convert source tree to WinUI 3 structure

  - task: MSBuild@1
    inputs:
      solution: Build/Uno.UI.Build.csproj
      msbuildLocationMethod: version
      msbuildVersion: latest
      msbuildArchitecture: x86
      msbuildArguments: /r /m /t:BuildGeneric "/p:CombinedConfiguration=$(CombinedConfiguration)" /detailedsummary /bl:$(build.artifactstagingdirectory)\build-$(GitVersion.FullSemVer)-$(XAML_FLAVOR_BUILD).binlog
      clean: false
      restoreNugetPackages: false
      logProjectEvents: false
      createLogFile: false

  - template: templates/copy-package-assets.yml

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(build.sourcesdirectory)\build-artifacts\bin-$(XAML_FLAVOR_BUILD)
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/windows-generic-bin-$(XAML_FLAVOR_BUILD).zip'

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: NugetPackages-Artifacts
      ArtifactType: Container
  
  # - task: PublishBuildArtifacts@1
  #   displayName: Publish Tizen Artifacts
  #   condition: always()
  #   inputs:
  #     PathtoPublish: $(build.sourcesdirectory)\src\SamplesApp\SamplesApp.Skia.Tizen\bin\Release\tizen50
  #     ArtifactName: uno-tizen-artifacts
  #     ArtifactType: Container
