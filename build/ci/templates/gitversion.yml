parameters:
  skipCacheDownload: ''

steps:

  - task: DownloadBuildArtifacts@0
    condition: ne('${{parameters.skipCacheDownload}}', 'true')
    displayName: 'Download GitVersion Cache'
    retryCountOnTaskFailure: 3
    inputs:
        artifactName: gitversion_cache
        downloadPath: '$(build.sourcesdirectory)/.git'

  # This step changes the PR version ID so that produced nuget packages can be tied
  # to specific builds. This can be used to create canaries from PR artifacts.
  - powershell: |
      $PR_VERSION="PullRequest-$env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER-$env:BUILD_BUILDID-"
      echo "Updating PR Version Tag in GitVersion to $PR_VERSION"
      (Get-Content gitversion.yml).replace("'PullRequest'", "$PR_VERSION") | Set-Content gitversion.yml

    condition: eq(variables['Build.Reason'], 'PullRequest')
    displayName: Update GitVersion file for PullRequests

  - task: gitversion/setup@0
    retryCountOnTaskFailure: 3
    inputs:
      versionSpec: '5.10.3'

  - task: gitversion/execute@0
    retryCountOnTaskFailure: 3
    inputs:
      updateAssemblyInfo: 'False'
      useConfigFile: true
      configFilePath: gitversion.yml
    displayName: Use GitVersion

  - powershell: |
      $PR_VERSION="$(GITVERSION.SemVer)"
      $PR_VERSION=$PR_VERSION.replace('.$(GitVersion.PreReleaseNumber)','')

      ## Updating the semver value is required to avoid race conditions with multiple
      ## jobs creating packages, and update pushed to the main branch.
      echo "Updating PR Version from [$(GITVERSION.SemVer)] to [$PR_VERSION]"
      echo "##vso[task.setvariable variable=GITVERSION.SemVer]$PR_VERSION"

    condition: eq(variables['Build.Reason'], 'PullRequest')
    displayName: Update GITVERSION.SemVer for PullRequests

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/.git/gitversion_cache
      ArtifactName: gitversion_cache
      ArtifactType: Container
