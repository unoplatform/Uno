<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFrameworks>$(NetPrevious);$(NetCurrent)</TargetFrameworks>
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
		<RollForward>minor</RollForward>
		<Nullable>enable</Nullable>
	</PropertyGroup>

	<Import Project="../targetframework-override-noplatform.props" />

	<ItemGroup>
		<PackageReference Include="Mono.Options" Version="6.6.0.161" />
		<PackageReference Include="Newtonsoft.Json" />
		<PackageReference Include="System.Reactive" Version="6.0.0" />
		<PackageReference Include="Unity" Version="5.11.10" />
		<PackageReference Include="Uno.Core.Extensions.Logging.Singleton" Version="4.0.0-dev.5" />
		<PackageReference Include="Microsoft.IO.RecyclableMemoryStream" Version="2.3.2" />
	</ItemGroup>

	<ItemGroup>
		<Compile Include="..\Uno.UI.RemoteControl\Helpers\**\*.cs" Link="Helpers/%(Filename)" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\Uno.UI.RemoteControl.Server\Uno.UI.RemoteControl.Server.csproj" />
	</ItemGroup>

	<ItemGroup Condition="'$(DocsGeneration)'==''">
		<ProjectReference Include="..\Uno.UI.RemoteControl.Server.Processors\Uno.UI.RemoteControl.Server.Processors.csproj">
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
			<SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
			<UndefineProperties>TargetFramework</UndefineProperties>
		</ProjectReference>
	</ItemGroup>
	
			<ItemGroup>
				<!-- 
					This forces the .net version to use, so the dev server will load the right core assemblies.
					Even if we make sure to run the version from the right .net<7|8> directory, if the computer has a newer version of .net than the version used to compiled the target app, 
					it might use that newer version (even if we have a RollFoward policy).
					This works only when the dev-server is started in the .dll file directory! (Which is the case of hot-reload tests helper of the runtime-tests engine).
				-->
		<Content Update="Config\*.json">
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</Content>
		<Content Update="Config\global-net7.0.json" Condition="'$(TargetFramework)' == 'net7.0'">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
			<TargetPath>global.json</TargetPath>
		</Content>
		<Content Update="Config\global-net8.0.json" Condition="'$(TargetFramework)' == 'net8.0'">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
			<TargetPath>global.json</TargetPath>
		</Content>
	</ItemGroup>	

	<Target Name="_UnoToolkitOverrideNuget" AfterTargets="AfterBuild" DependsOnTargets="BuiltProjectOutputGroup" Condition="'$(UnoNugetOverrideVersion)'!=''">
		<PropertyGroup>
			<_OverridePackageId>Uno.UI</_OverridePackageId>
			<_OverridePackageId Condition="'$(UNO_UWP_BUILD)'=='false'">Uno.WinUI</_OverridePackageId>
			<_TargetNugetFolder>$(NuGetPackageRoot)\$(_OverridePackageId).DevServer\$(UnoNugetOverrideVersion)\tools\rc\host\$(TargetFramework)</_TargetNugetFolder>
		</PropertyGroup>
		<ItemGroup>
			<_OutputFiles Include="$(TargetDir)*.*" />
		</ItemGroup>
		<MakeDir Directories="$(_TargetNugetFolder)" />
		<Message Importance="high" Text="OVERRIDING NUGET PACKAGE CACHE: $(_TargetNugetFolder)" />
		<Copy SourceFiles="@(_OutputFiles)" DestinationFiles="@(_OutputFiles->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
		<Copy SourceFiles="@(_OutputFilesPDB)" DestinationFiles="@(_OutputFilesPDB->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename).pdb')" />
	</Target>

	<Target Name="GetTargetPath" />
	<Target Name="GetCopyToPublishDirectoryItems" />

</Project>
