// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// MUX Reference RemapVirtualKey.cpp, tag winui3/release/1.6-preview1

using System;
using System.Diagnostics;
using Windows.System;

namespace InputUtility;

internal static class RemapVirtualKeyHelper
{
	// Virtual Key values that are generated by the Gamepad or Remote Control may
	// be mapped to standard keyboard key values to enable Controls to leverage
	// existing keyboard support.

	// Set up mapping tables for keys that may need to be remapped.

	private struct Entry
	{
		public VirtualKey raw;
		public VirtualKey mapped;

		public Entry(VirtualKey raw, VirtualKey mapped)
		{
			this.raw = raw;
			this.mapped = mapped;
		}
	};

	private static readonly Entry[] s_gamepadArray =
	[
		new Entry(VirtualKey.GamepadA, VirtualKey.Space),
		new Entry(VirtualKey.GamepadB, VirtualKey.Escape),
		new Entry(VirtualKey.GamepadX, VirtualKey.GamepadX),
		new Entry(VirtualKey.GamepadY, VirtualKey.GamepadY),
		new Entry(VirtualKey.GamepadRightShoulder, VirtualKey.GamepadRightShoulder),
		new Entry(VirtualKey.GamepadLeftShoulder, VirtualKey.GamepadLeftShoulder),
		new Entry(VirtualKey.GamepadLeftTrigger, VirtualKey.GamepadLeftTrigger),
		new Entry(VirtualKey.GamepadRightTrigger, VirtualKey.GamepadRightTrigger),
		new Entry(VirtualKey.GamepadDPadUp, VirtualKey.Up),
		new Entry(VirtualKey.GamepadDPadDown, VirtualKey.Down),
		new Entry(VirtualKey.GamepadDPadLeft, VirtualKey.Left),
		new Entry(VirtualKey.GamepadDPadRight, VirtualKey.Right),
		new Entry(VirtualKey.GamepadMenu, VirtualKey.GamepadMenu),
		new Entry(VirtualKey.GamepadView, VirtualKey.GamepadView),
		new Entry(VirtualKey.GamepadLeftThumbstickButton, VirtualKey.GamepadLeftThumbstickButton),
		new Entry(VirtualKey.GamepadRightThumbstickButton, VirtualKey.GamepadRightThumbstickButton),
		new Entry(VirtualKey.GamepadLeftThumbstickUp, VirtualKey.Up),
		new Entry(VirtualKey.GamepadLeftThumbstickDown, VirtualKey.Down),
		new Entry(VirtualKey.GamepadLeftThumbstickRight, VirtualKey.Right),
		new Entry(VirtualKey.GamepadLeftThumbstickLeft, VirtualKey.Left),
		new Entry(VirtualKey.GamepadRightThumbstickUp, VirtualKey.GamepadRightThumbstickUp),
		new Entry(VirtualKey.GamepadRightThumbstickDown, VirtualKey.GamepadRightThumbstickDown),
		new Entry(VirtualKey.GamepadRightThumbstickRight, VirtualKey.GamepadRightThumbstickRight),
		new Entry(VirtualKey.GamepadRightThumbstickLeft, VirtualKey.GamepadRightThumbstickLeft),
	];

	public static VirtualKey RemapVirtualKey(VirtualKey @in)
	{
		if (@in >= s_gamepadArray[0].raw && @in <= s_gamepadArray[^1].raw)
		{
			var index = @in - s_gamepadArray[0].raw;
			Debug.Assert(s_gamepadArray[index].raw == @in);
			return s_gamepadArray[index].mapped;
		}

		return @in;
	}
}
