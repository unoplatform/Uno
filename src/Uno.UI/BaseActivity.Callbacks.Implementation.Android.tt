<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>

<#
// On metadata view of the Activity and FragmentActivity classes, use the regex: (^\s*(//|\[).*\r\n|\[\w+\])
// Then keep only methods which are required (currently all the "OnXXXX" expect (Create|Prepare)Dialog (Obsolete) and OnRetainNonConfigurationInstance (sealed))
// If you want to exclude a method, you can prefix its line with "//" 
// If you have a namespace clash (eg. Context in OnCreateView) you can use FQN (eg. Android.Content.Context)
// Line which does not contains the "virtual" keyword will be ignored.

var overridableMethods = @"
	// FragmentActivity
	public virtual void OnRequestPermissionsResult(int requestCode, string[] permissions,  Permission[] grantResults);RequestPermissionsResultWithResults
	public virtual void OnAttachFragment(Fragment fragment);
	protected override void OnCreate(Bundle savedInstanceState);
	public override View OnCreateView(View parent, string name, Context context, IAttributeSet attrs);CreateViewWithParent
	public override View OnCreateView(string name, Context context, IAttributeSet attrs);
	protected virtual bool OnPrepareOptionsPanel(View view, IMenu menu);
	// Removed because support 25 does not include this method anymore.
	// public virtual void OnRequestPermissionsResult(int requestCode, string[] permissions);
	protected virtual void OnResumeFragments();
	public virtual Java.Lang.Object OnRetainCustomNonConfigurationInstance();
	//public override sealed Java.Lang.Object OnRetainNonConfigurationInstance();
	public virtual void OnStateNotSaved();


	// Activity
	public virtual void OnActionModeFinished(ActionMode mode);
	public virtual void OnActionModeStarted(ActionMode mode);
	public virtual void OnActivityReenter(int resultCode, Intent data);
	protected virtual void OnActivityResult(int requestCode,  Result resultCode, Intent data);
	public virtual void OnAttachedToWindow();
	public virtual void OnAttachFragment(Fragment fragment);
	public virtual void OnBackPressed();
	protected virtual void OnChildTitleChanged(Activity childActivity, ICharSequence title);
	protected void OnChildTitleChanged(Activity childActivity, string title);
	public virtual void OnConfigurationChanged(Configuration newConfig);
	public virtual void OnContentChanged();
	public virtual bool OnContextItemSelected(IMenuItem item);
	public virtual void OnContextMenuClosed(IMenu menu);
	protected virtual void OnCreate(Bundle savedInstanceState);
	public virtual void OnCreate(Bundle savedInstanceState, PersistableBundle persistentState);CreateWithPersistedState
	public virtual void OnCreateContextMenu(IContextMenu menu, View v, IContextMenuContextMenuInfo menuInfo);
	public virtual ICharSequence OnCreateDescriptionFormatted();
	public string OnCreateDescription();
	//protected virtual Dialog OnCreateDialog(int id);
	//protected virtual Dialog OnCreateDialog(int id, Bundle args);
	public virtual void OnCreateNavigateUpTaskStack(TaskStackBuilder builder);
	public virtual bool OnCreateOptionsMenu(IMenu menu);
	public virtual bool OnCreatePanelMenu(int featureId, IMenu menu);
	public virtual View OnCreatePanelView(int featureId);
	public virtual bool OnCreateThumbnail(Bitmap outBitmap, Canvas canvas);
	public virtual View OnCreateView(View parent, string name, Android.Content.Context context, IAttributeSet attrs);CreateViewWithParent
	public virtual View OnCreateView(string name, Android.Content.Context context, IAttributeSet attrs);
	protected virtual void OnDestroy();
	public virtual void OnDetachedFromWindow();
	public virtual void OnEnterAnimationComplete();
	public virtual bool OnGenericMotionEvent(MotionEvent e);
	public virtual bool OnKeyDown( Keycode keyCode, KeyEvent e);
	public virtual bool OnKeyLongPress( Keycode keyCode, KeyEvent e);
	public virtual bool OnKeyMultiple( Keycode keyCode, int repeatCount, KeyEvent e);
	public virtual bool OnKeyShortcut( Keycode keyCode, KeyEvent e);
	public virtual bool OnKeyUp( Keycode keyCode, KeyEvent e);
	public virtual void OnLowMemory();
	public virtual bool OnMenuOpened(int featureId, IMenu menu);
	public virtual bool OnNavigateUp();
	public virtual bool OnNavigateUpFromChild(Activity child);
	protected virtual void OnNewIntent(Intent intent);
	public virtual bool OnOptionsItemSelected(IMenuItem item);
	public virtual void OnOptionsMenuClosed(IMenu menu);
	public virtual void OnPanelClosed(int featureId, IMenu menu);
	protected virtual void OnPause();
	protected virtual void OnPostCreate(Bundle savedInstanceState);
	public virtual void OnPostCreate(Bundle savedInstanceState, PersistableBundle persistentState);PostCreateWithPersistedState
	protected virtual void OnPostResume();
	//protected virtual void OnPrepareDialog(int id, Dialog dialog);
	//protected virtual void OnPrepareDialog(int id, Dialog dialog, Bundle args);
	public virtual void OnPrepareNavigateUpTaskStack(TaskStackBuilder builder);
	public virtual bool OnPrepareOptionsMenu(IMenu menu);
	public virtual bool OnPreparePanel(int featureId, View view, IMenu menu);
	public virtual void OnProvideAssistData(Bundle data);
	protected virtual void OnRestart();
	protected virtual void OnRestoreInstanceState(Bundle savedInstanceState);
	public virtual void OnRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState);RestoreInstanceStateWithPersistedState
	protected virtual void OnResume();
	public virtual void OnTopResumedActivityChanged(bool isTopResumedActivity);
	//public virtual Java.Lang.Object OnRetainNonConfigurationInstance();
	protected virtual void OnSaveInstanceState(Bundle outState);
	public virtual void OnSaveInstanceState(Bundle outState, PersistableBundle outPersistentState);SaveInstanceStateWithPersistedState
	public virtual bool OnSearchRequested();
	protected virtual void OnStart();
	protected virtual void OnStop();
	protected virtual void OnTitleChanged(ICharSequence title, Color color);
	protected void OnTitleChanged(string title, Color color);
	public virtual bool OnTouchEvent(MotionEvent e);
	public virtual bool OnTrackballEvent(MotionEvent e);
	public virtual void OnTrimMemory( TrimMemory level);
	public virtual void OnUserInteraction();
	protected virtual void OnUserLeaveHint();
	public virtual void OnVisibleBehindCanceled();
	public virtual void OnWindowAttributesChanged(WindowManagerLayoutParams @params);
	public virtual void OnWindowFocusChanged(bool hasFocus);
	public virtual ActionMode OnWindowStartingActionMode(ActionMode.ICallback callback);
";


#>
#pragma warning disable

using System;
using Android.App;
using Android.Content;
using Android.Content.PM;
using Android.Content.Res;
using Android.Graphics;
using Android.OS;
using Android.Util;
using Android.Views;
using Java.Lang;
using Uno.UI.ViewManagement;

namespace Uno.UI
{
	partial class BaseActivity : IBaseActivityEvents { }

<# 
	var methodRegex = new Regex(@"(?<modifiers>[\s\w]+)\s+(?<return>[\w\.]+)\s+(?<name>\w+)\((?<parameters>[^\)]*)\)(;(?<nameOverride>.*))?");
	//var parametersRegex = new Regex(@"")

	var methods = overridableMethods
		.Split('\r', '\n')
		.Where(line => !string.IsNullOrWhiteSpace(line) && !line.Trim().StartsWith("//") && line.Contains("virtual"))
		.Distinct()
		.Select(method => 
		{
			var match = methodRegex.Match(method);

			var name = match.Groups["name"].Value;
			var nameOverride = match.Groups["nameOverride"].Value;

			var eventName = string.IsNullOrEmpty(nameOverride) ? name : nameOverride;
			eventName = eventName.StartsWith("On") ? eventName.Substring(2) : eventName;
		
			return new 
			{
				modifiers = match.Groups["modifiers"].Value.Trim(),
				returnType = match.Groups["return"].Value,
				name = name,
				eventName = eventName,
				nameOverride = nameOverride,
				parameters = match.Groups["parameters"].Value
			};
		})
		.OrderBy(method => method.name)
		.ThenBy(method => method.parameters.Length);

	foreach(var method in methods) 
	{
		var name = string.IsNullOrEmpty(method.nameOverride)
			? method.name.Replace("On", "")
			: method.nameOverride;
		var parameters = method.parameters
			.Split(',')
			.Where(parameter => !string.IsNullOrWhiteSpace(parameter))
			.Select(parameter => 
			{
				var p = parameter.Split(' ').Where(part => !string.IsNullOrWhiteSpace(part));
		
				return new 
				{ 
					type = p.FirstOrDefault() ?? "NOT_FOUND",
					name = p.LastOrDefault() ?? "NOT_FOUND"
				};
			})
			.ToArray();
		var baseParameters = string.Join(",", parameters.Select(p => p.name));
		
		string type, value;
		if (parameters.Length == 0)
		{
			type = "";
			value = "";
		}
		else if (parameters.Length == 1)
		{
			type = parameters[0].type;
			value = parameters[0].name;
		}
		else
		{
			type = name + "EventArgs";
			value = "new " +  name + "EventArgs(" + baseParameters + ")";
			//type = $"System.Tuple<{string.Join(", ", parameters.Select(p => p.type))}>";
			//value = $"System.Tuple.Create({string.Join(", ", parameters.Select(p => p.name))})";
			#>
			partial class BaseActivity
			{
				public class <#= name#>EventArgs
				{
					public <#= name#>EventArgs(<#= method.parameters #>)
					{
						<# foreach(var parameter in parameters) { #>
							<#= char.ToUpper(parameter.name[0]) + parameter.name.Substring(1) #> = <#= parameter.name#>; 
						<# } #>
					}
				
					<# foreach(var parameter in parameters) { #>
						public <#= parameter.type #> <#= char.ToUpper(parameter.name[0]) + parameter.name.Substring(1) #> { get; } 
					<# } #>
				}
			}
			<#
		}
		
		if(!string.IsNullOrEmpty(type))
		{
#>
			partial class BaseActivity
			{
				/// <summary>
				/// Occurs when <see cref="<#= method.name #>"/> is invoked on the activity.
				/// </summary>
				public event EventHandler<<#= type #>> <#= name #>;
			}
<#
		}
		else
		{
#>
			partial class BaseActivity
			{
				/// <summary>
				/// Occurs when <see cref="<#= method.name #>"/> is invoked on the activity.
				/// </summary>
				public event EventHandler <#= name #>;
			}
<#
		}
#>
		
		partial class BaseActivity
		{
			<#= method.modifiers.Replace("virtual", "override") #> <#= method.returnType #> <#= method.name #>(<#= method.parameters #>)
			{
				var handler = <#= name #>;
				if (handler != null)
				{
					handler.Invoke(this, <#= string.IsNullOrEmpty(value) ? "EventArgs.Empty" : value #>);
				}

				_<#= method.eventName #>Handlers?.Invoke(<#= baseParameters #>);

				Inner<#= name#>(<#= baseParameters #>);
				<#= method.returnType == "void" ? "" : "return" #> base.<#= method.name #>(<#= baseParameters #>);
			}

			partial void Inner<#= name#>(<#= method.parameters #>);

			private Activity<#= method.eventName #>Handler _<#= method.eventName #>Handlers;
			event Activity<#= method.eventName #>Handler IBaseActivityEvents.<#= method.eventName #>
			{
				add
				{
					_<#= method.eventName #>Handlers += value;
				}
				remove
				{
					_<#= method.eventName #>Handlers -= value;
				}
			}
		}

<#
	} // foreach
#>
}
