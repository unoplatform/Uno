// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class DebugSettings
	{
		// Skipping already declared property IsTextPerformanceVisualizationEnabled
		// Skipping already declared property IsBindingTracingEnabled
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool FailFastOnErrors
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool DebugSettings.FailFastOnErrors is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20DebugSettings.FailFastOnErrors");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.DebugSettings", "bool DebugSettings.FailFastOnErrors");
			}
		}
#endif
		// Skipping already declared property EnableFrameRateCounter
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsXamlResourceReferenceTracingEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool DebugSettings.IsXamlResourceReferenceTracingEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20DebugSettings.IsXamlResourceReferenceTracingEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.DebugSettings", "bool DebugSettings.IsXamlResourceReferenceTracingEnabled");
			}
		}
#endif
		// Skipping already declared property LayoutCycleTracingLevel
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel LayoutCycleDebugBreakLevel
		{
			get
			{
				throw new global::System.NotImplementedException("The member LayoutCycleDebugBreakLevel DebugSettings.LayoutCycleDebugBreakLevel is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LayoutCycleDebugBreakLevel%20DebugSettings.LayoutCycleDebugBreakLevel");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.DebugSettings", "LayoutCycleDebugBreakLevel DebugSettings.LayoutCycleDebugBreakLevel");
			}
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.EnableFrameRateCounter.get
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.EnableFrameRateCounter.set
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.IsBindingTracingEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.IsBindingTracingEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.IsTextPerformanceVisualizationEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.IsTextPerformanceVisualizationEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.FailFastOnErrors.get
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.FailFastOnErrors.set
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.BindingFailed.add
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.BindingFailed.remove
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.IsXamlResourceReferenceTracingEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.IsXamlResourceReferenceTracingEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.XamlResourceReferenceFailed.add
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.XamlResourceReferenceFailed.remove
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.LayoutCycleTracingLevel.get
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.LayoutCycleTracingLevel.set
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.LayoutCycleDebugBreakLevel.get
		// Forced skipping of method Microsoft.UI.Xaml.DebugSettings.LayoutCycleDebugBreakLevel.set
		// Skipping already declared event Microsoft.UI.Xaml.DebugSettings.BindingFailed
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.DebugSettings, global::Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs> XamlResourceReferenceFailed
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.DebugSettings", "event TypedEventHandler<DebugSettings, XamlResourceReferenceFailedEventArgs> DebugSettings.XamlResourceReferenceFailed");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.DebugSettings", "event TypedEventHandler<DebugSettings, XamlResourceReferenceFailedEventArgs> DebugSettings.XamlResourceReferenceFailed");
			}
		}
#endif
	}
}
