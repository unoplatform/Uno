			<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:not_android="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:converters="using:Uno.UI.Converters"
					xmlns:local="using:GenericApp.Views.Controls"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:u="using:Uno.UI.Controls"
					xmlns:not_win="http://uno.ui/not_win"
					xmlns:ios="http://uno.ui/ios#using:Uno.UI.Views.Controls;Uno.UI.Controls;UIKit"
					xmlns:android="http://uno.ui/android#using:Uno.UI.Controls"
					xmlns:native_ios="using:UIKit"
					xmlns:native_android="using:Android.Widget"
					xmlns:toolkit="using:Uno.UI.Toolkit"
					mc:Ignorable="d win not_win android">

    <!-- Default native Button styles -->
	<android:Style x:Key="NativeDefaultButton"
				   TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<BindableButtonEx Text="{TemplateBinding Content}"
									  IsEnabled="{TemplateBinding IsEnabled}"
									  Foreground="{TemplateBinding Foreground}"
									  ForegroundColor="White"
									  DisableWhenNoCommand="false" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>
    <android:Style x:Key="AndroidButtonStyle" BasedOn="{StaticResource NativeDefaultButton}" TargetType="Button" />

    <ios:Style x:Key="NativeDefaultButton"
			       TargetType="Button">
		    <Setter Property="Template">
			    <Setter.Value>
				    <ControlTemplate TargetType="Button">
					    <ios:BindableUIButton Text="{TemplateBinding Content}"
									      IsEnabled="{TemplateBinding IsEnabled}"
									      Foreground="{TemplateBinding Foreground}" />
				    </ControlTemplate>
			    </Setter.Value>
		    </Setter>
    </ios:Style>
    <ios:Style x:Key="iOSButtonStyle" BasedOn="{StaticResource NativeDefaultButton}" TargetType="Button" />

    <not_win:Style BasedOn="{StaticResource NativeDefaultButton}" TargetType="Button" />

    <!-- Default native CheckBox styles -->
    <android:Style x:Key="NativeDefaultCheckBox"
				   TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <android:BindableCheckBox Text="{TemplateBinding Content}"
											  Checked="{TemplateBinding IsChecked}"
											  Enabled="{TemplateBinding IsEnabled}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </android:Style>
    <android:Style x:Key="AndroidCheckBoxStyle" BasedOn="{StaticResource NativeDefaultCheckBox}" TargetType="Button" />

    <ios:Style x:Key="NativeDefaultCheckBox" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <toto Orientation="Horizontal">
                        <ios:BindableUISwitch IsOn="{TemplateBinding IsChecked, Mode=TwoWay}"
									    Enabled="{TemplateBinding IsEnabled}"
									    Background="{TemplateBinding Background}"
									    Foreground="{TemplateBinding Foreground}"  />
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </toto>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </ios:Style>
    <not_win:Style BasedOn="{StaticResource NativeDefaultCheckBox}" TargetType="CheckBox" />

    <!-- Default native RadioButton styles -->
    <android:Style x:Key="AndroidRadioButtonStyle"
				   TargetType="RadioButton">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<android:BindableRadioButton Text="{TemplateBinding Content}"
												 Checked="{TemplateBinding IsChecked}"
												 Enabled="{TemplateBinding IsEnabled}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

    <!-- Default native ToggleSwitch styles -->
    <ios:Style x:Key="NativeDefaultToggleSwitch" TargetType="ToggleSwitch">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleSwitch">
                    <StackPanel>
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                        <ios:BindableUISwitch IsOn="{TemplateBinding IsOn, Mode=TwoWay}"
                                              Enabled="{TemplateBinding IsEnabled}"
                                              Background="{TemplateBinding Background}"
                                              Foreground="{TemplateBinding Foreground}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </ios:Style>

    <android:Style x:Key="NativeDefaultToggleSwitch" TargetType="ToggleSwitch">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <StackPanel>
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        <BindableSwitch Checked="{TemplateBinding IsOn, Mode=TwoWay}"
									    Enabled="{TemplateBinding IsEnabled}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </android:Style>

    <not_win:Style BasedOn="{StaticResource NativeDefaultToggleSwitch}" TargetType="ToggleSwitch" />

    <!-- Default native Slider styles -->
    <ios:Style x:Key="NativeDefaultSlider" TargetType="Slider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <!-- Value must be defined last, as UISlider's default MinValue is 0 and MaxValue is 1 -->
                    <ios:BindableUISlider MinValue="{TemplateBinding Minimum}"
                                      MaxValue="{TemplateBinding Maximum}"
                                      Value="{TemplateBinding Value, Mode=TwoWay}"
                                      />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </ios:Style>
    <android:Style x:Key="NativeDefaultSlider" TargetType="Slider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <!-- Value must be defined last, as UISlider's default MinValue is 0 and MaxValue is 1 -->
                    <android:BindableSeekBar Maximum="{TemplateBinding Maximum}"
                                     Minimum="{TemplateBinding Minimum}"
                                     Value="{TemplateBinding Value, Mode=TwoWay}"
                                     />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </android:Style>
    <not_win:Style BasedOn="{StaticResource NativeDefaultSlider}" TargetType="Slider" />

    <converters:UnoNativeDefaultProgressBarReverseBoolConverter x:Key="nativeDefaultProgressBarReverseBool" />

    <!-- Default native ProgressBar styles -->
    <ios:Style x:Key="NativeDefaultProgressBar" TargetType="ProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Grid>
                        <Grid.Resources>
                        </Grid.Resources>
                        <ProgressRing IsActive="{TemplateBinding IsIndeterminate}"
                                  Foreground="{TemplateBinding Foreground}"
                                  Hidden="{TemplateBinding IsIndeterminate, Converter={StaticResource nativeDefaultProgressBarReverseBool}}"/>
                        <ios:BindableUIProgressView IsActive="{TemplateBinding IsIndeterminate}"
                                  Progress="{TemplateBinding ActualValue}"
                                  Foreground="{TemplateBinding Foreground}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </ios:Style>
    <android:Style x:Key="NativeDefaultProgressBar" TargetType="ProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Grid>
                        <android:BindableProgressBar
                                  Indeterminate="{TemplateBinding IsIndeterminate}"
                                  Progress="{TemplateBinding ActualValue}"
                                  Max="{TemplateBinding Max}"
                                  Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </android:Style>
    <not_win:Style BasedOn="{StaticResource NativeDefaultProgressBar}" TargetType="ProgressBar" />

    <!-- Default native TextBox styles -->
    <not_win:Style x:Key="NativeDefaultTextBox"  TargetType="TextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <ContentPresenter x:Name="HeaderContentPresenter"
										  x:DeferLoadStrategy="Lazy"
										  Visibility="Collapsed"
										  Grid.Row="0"
										  Foreground="{ThemeResource SystemControlForegroundBaseHighBrush}"
										  Margin="0,0,0,8"
										  Grid.ColumnSpan="2"
										  Content="{TemplateBinding Header}"
										  ContentTemplate="{TemplateBinding HeaderTemplate}"
										  FontWeight="Normal" />
                        <ContentControl x:Name="ContentElement"
									  Grid.Row="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </not_win:Style>
    <not_win:Style BasedOn="{StaticResource NativeDefaultTextBox}" TargetType="TextBox" />

    <!-- Default native Pivot styles -->
    <ios:Style x:Key="NativeDefaultPivot" TargetType="Pivot">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Pivot">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid x:Name="PART_Content" Grid.Row="0" />
                        <ios:UITabBar Grid.Row="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </ios:Style>

	<android:Style x:Key="NativeDefaultPivot" TargetType="Pivot">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Pivot">
                    <Grid>
                        <ExtendedViewPager OffscreenPageLimit="1" SwipeEnabled="true" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </android:Style>

    <not_win:Style BasedOn="{StaticResource NativeDefaultPivot}" TargetType="Pivot" />

	<ios:Style x:Key="NativeDefaultCommandBar"
			   TargetType="CommandBar">
		<Setter Property="Background"
				Value="{x:Null}" />
		<Setter Property="Foreground"
				Value="{x:Null}" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<!-- We use BorderBrush instead of Background to ensure that semi-transparent background of Grid and NativeCommandBarPresenter don't add up -->
					<Border BorderBrush="{TemplateBinding Background}"
						    BorderThickness="{TemplateBinding Padding}">
						<!-- TODO: 1px line -->
						<ios:NativeCommandBarPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<android:Style x:Key="NativeDefaultCommandBar"
				   TargetType="CommandBar">
		<Setter Property="Background"
				Value="{x:Null}" />
		<Setter Property="Foreground"
				Value="{x:Null}" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<android:NativeCommandBarPresenter />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<not_win:Style TargetType="CommandBar"
				   BasedOn="{StaticResource NativeDefaultCommandBar}" />

	<ios:Style x:Key="NativeDefaultAppBarButton"
				   TargetType="AppBarButton">
		<Setter Property="Background"
				Value="Transparent" />
		<ios:Setter Property="Foreground"
					Value="{x:Null}" />
	</ios:Style>

	<android:Style x:Key="NativeDefaultAppBarButton"
				   TargetType="AppBarButton">
		<Setter Property="Background"
				Value="Transparent" />
		<ios:Setter Property="Foreground"
					Value="{x:Null}" />
	</android:Style>

	<not_win:Style TargetType="AppBarButton"
				   BasedOn="{StaticResource NativeDefaultAppBarButton}" />

	<!-- Default native Frame styles -->
    <ios:Style x:Key="NativeDefaultFrame" TargetType="Frame">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Frame">
                    <ios:NativeFramePresenter NavigationBarHidden="False" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </ios:Style>


	<!-- Default native Frame styles -->
    <android:Style x:Key="NativeDefaultFrame" TargetType="Frame">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Frame">
                    <android:NativeFramePresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </android:Style>

    <not_win:Style BasedOn="{StaticResource NativeDefaultFrame}" TargetType="Frame" />

	<!--
		Official recommendation:
		"Side nav width: Equal to the screen width minus the height of the action bar."
		Source: https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs

		Current approximation:
		- Most small devices sold now have a screen width of 360dp.
		- The action bar has a height of 56dp on most phones.
		Value: 360 - 56 = 304

		TODO: Calculate programmatically.
	-->
	<android:Double x:Key="NativeDefaultSplitViewOpenPaneLength">304</android:Double>

	<android:Style x:Key="LeftDrawerSplitViewStyle"
				   TargetType="SplitView">
		<Setter Property="OpenPaneLength"
				Value="{StaticResource NativeDefaultSplitViewOpenPaneLength}" />
		<Setter Property="PaneBackground"
				Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="SplitView">
					<android:BindableDrawerLayout LeftPaneOpenLength="{TemplateBinding OpenPaneLength}"
										  LeftPane="{TemplateBinding Pane}"
										  LeftPaneBackground="{TemplateBinding PaneBackground}"
										  IsLeftPaneOpen="{TemplateBinding IsPaneOpen, Mode=TwoWay}"
										  IsLeftPaneEnabled="{Binding (toolkit:SplitViewExtensions.IsPaneEnabled), RelativeSource={RelativeSource TemplatedParent}}"
										  Content="{TemplateBinding Content}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<android:Style x:Key="RightDrawerSplitViewStyle"
				   TargetType="SplitView">
		<Setter Property="OpenPaneLength"
				Value="{StaticResource NativeDefaultSplitViewOpenPaneLength}" />
		<Setter Property="PaneBackground"
				Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="SplitView">
					<android:BindableDrawerLayout RightPaneOpenLength="{TemplateBinding OpenPaneLength}"
										  RightPane="{TemplateBinding Pane}"
										  RightPaneBackground="{TemplateBinding PaneBackground}"
										  IsRightPaneOpen="{TemplateBinding IsPaneOpen, Mode=TwoWay}"
										  IsRightPaneEnabled="{Binding (toolkit:SplitViewExtensions.IsPaneEnabled), RelativeSource={RelativeSource TemplatedParent}}"
										  Content="{TemplateBinding Content}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

</ResourceDictionary>
