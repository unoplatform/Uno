<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<UsingTask
		Condition="'$(_IsUnoUISolution)'==''"
		AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll"
		TaskName="Uno.UI.Tasks.Assets.ExpandPackageAssets_v0" />

	<UsingTask
		Condition="'$(_IsUnoUISolution)'!=''"
		AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll"
		TaskName="Uno.UI.Tasks.Assets.ExpandPackageAssets_v0"
		TaskFactory="TaskHostFactory" />

	<PropertyGroup>
		<_UnoDirectorySeparator Condition="'$(OS)' == 'Unix'">/</_UnoDirectorySeparator>
		<_UnoDirectorySeparator Condition="'$(OS)' == 'Windows_NT'">\</_UnoDirectorySeparator>
	</PropertyGroup>

	<Target Name="_DefineUnoPriProperties">
		<!-- Generate Library Layout when generating NuGet packages -->
		<PropertyGroup Condition="'$(UnoSkipLibraryLayout)' != 'true'">
			<TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_UnoIncludeLibraryAssets</TargetsForTfmSpecificContentInPackage>

			<UnoPriInitialPath>$(AssemblyName)</UnoPriInitialPath>
			<ProjectUnoPriFileName Condition="'$(ProjectUnoPriFileName)' == '' and '$(UnoPriInitialPath)' != ''">$(UnoPriInitialPath).uprimarker</ProjectUnoPriFileName>
			<ProjectUnoPriFullPath Condition="'$(ProjectUnoPriFullPath)' == ''">$(TargetDir)$(ProjectUnoPriFileName)</ProjectUnoPriFullPath>
		</PropertyGroup>
	</Target>

	<!--
	Local marker declaration, used when project outputs are determined transitively
	-->
	<Target Name="_UnoDeclarePriMarker"
			AfterTargets="_UnoGeneratePriMarker"
			DependsOnTargets="_DefineUnoPriProperties"
			BeforeTargets="GetCopyToOutputDirectoryItems">

		<ItemGroup Condition="exists('$(ProjectUnoPriFullPath)')">
			<_AllChildProjectItemsWithTargetPath Include="$(ProjectUnoPriFullPath)">
				<TargetPath>$(ProjectUnoPriFileName)</TargetPath>
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
				<PublishFolderType>None</PublishFolderType>
			</_AllChildProjectItemsWithTargetPath>
		</ItemGroup>

	</Target>

	<!--
	Marker generation to ensure that assets are only copied for uno-enabled targets

	The target needs also to run in the context of generating a nuget package after a build 
	has already occurred. See https://github.com/unoplatform/uno/issues/13167#issuecomment-1677286706
	-->
	<Target Name="_UnoGeneratePriMarker"
			Condition="'$(GenerateLibraryLayout)' == 'true' AND '$(SDKIdentifier)' != 'Windows'"
			BeforeTargets="PrepareForRun;GenerateNuSpec"
			DependsOnTargets="_DefineUnoPriProperties">

		<WriteLinesToFile File="$(ProjectUnoPriFullPath)"
						  Lines="@(ContentWithTargetPath)"
						  Condition="'@(ContentWithTargetPath)'!=''"
						  Overwrite="true" />

	</Target>

	<!--
	Assign NuGet metadata for generated nuget packages to contain
	assets next to each target framework assemblies
	-->
	<Target Name="_UnoIncludeLibraryAssets"
			Condition="'$(GenerateLibraryLayout)' == 'true' AND '$(SDKIdentifier)' != 'Windows'"
			DependsOnTargets="_DefineUnoPriProperties">
		<PropertyGroup>
			<_UnoTargetPlatformVersion
				Condition="
					'$(TargetPlatformIdentifier)'=='android'
					or '$(TargetPlatformIdentifier)'=='ios'
					or '$(TargetPlatformIdentifier)'=='macos'
					or '$(TargetPlatformIdentifier)'=='maccatalyst'
					or '$(TargetPlatformIdentifier)'=='desktop'
					or '$(TargetPlatformIdentifier)'=='browserwasm'
					">$(TargetPlatformVersion)</_UnoTargetPlatformVersion>
		</PropertyGroup>

		<ItemGroup>
			<_filteredContentWithTargetPath
				Include="@(ContentWithTargetPath)" />

			<TfmSpecificPackageFile Include="@(_filteredContentWithTargetPath)"
									PackagePath="lib\$(TargetFramework)$(_UnoTargetPlatformVersion)\$(UnoPriInitialPath)\%(_filteredContentWithTargetPath.TargetPath)" />
			<TfmSpecificPackageFile Condition="'@(ContentWithTargetPath)'!=''"
									Include="$(ProjectUnoPriFullPath)"
									PackagePath="lib\$(TargetFramework)$(_UnoTargetPlatformVersion)\$(ProjectUnoPriFileName)" />
		</ItemGroup>
	</Target>

	<!-- 
	Avoid the generation of the AAR file on android as we're already
	packing the files ourselves.
	-->
	<Target Name="_UnoCleanupAar"
			Condition="'$(GenerateLibraryLayout)' == 'true' AND '$(TargetPlatformIdentifier)'=='android'"
			BeforeTargets="_CreateAarCache">
		<ItemGroup>
			<AndroidAsset Remove="@(Content)" />
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<_UnoAddLibraryAssetsBeforeTargets>
			$(_UnoAddLibraryAssetsBeforeTargets);
			GetCopyToOutputDirectoryItems;
			GenerateUnoWasmAssets;
		</_UnoAddLibraryAssetsBeforeTargets>
	</PropertyGroup>

	<!--
	Populate output groups when building heads
	-->
	<Target Name="_UnoAddLibraryAssets"
			Condition="'$(IsUnoHead)'=='true' or '$(AndroidApplication)'=='true' or '$(ProjectTypeGuids)'!=''"
			DependsOnTargets="_UnoFindPackageAssetMarkers"
			BeforeTargets="$(_UnoAddLibraryAssetsBeforeTargets)">

		<ExpandPackageAssets_v0 MarkerFiles="@(_UnoPriFiles)">
			<Output TaskParameter="Assets" ItemName="_UnoAssetsFilesExpanded" />
		</ExpandPackageAssets_v0>

		<ItemGroup>
			<_AllChildProjectItemsWithTargetPath Include="@(_UnoAssetsFilesExpanded)" KeepMetadata="TargetPath">
				<TargetPath Condition="'$(PriInitialPath)' != ''">$(PriInitialPath)\%(_UnoAssetsFilesExpanded.TargetPath)</TargetPath>
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			</_AllChildProjectItemsWithTargetPath>
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<_UnoFindPackageAssetMarkersDependsOn Condition="'$(ProjectTypeGuids)'!=''">
			$(_UnoFindPackageAssetMarkersDependsOn);
			ResolveNuGetPackageAssets
		</_UnoFindPackageAssetMarkersDependsOn>
	</PropertyGroup>

	<!--
	Determines the marker location for project references
	-->
	<Target Name="_UnoFindPackageAssetMarkers"
			Condition="'$(IsUnoHead)'=='true' or '$(AndroidApplication)'=='true' or '$(ProjectTypeGuids)'!=''"
			DependsOnTargets="$(_UnoFindPackageAssetMarkersDependsOn)">

		<ItemGroup Condition="'$(ProjectTypeGuids)'!=''">
			<!-- Xamarin-based targets which don't set RuntimeCopyLocalItems must use  -->
			<_UnoPriFiles Include="@(Reference->'%(RootDir)%(Directory)%(Filename).uprimarker')"
						  Condition="$([System.IO.File]::Exists('%(RootDir)%(Directory)%(Filename).uprimarker'))"
						  PublishFolderType="None" />
		</ItemGroup>

		<ItemGroup Condition="'$(ProjectTypeGuids)'==''">
			<_UnoPriFiles Include="@(RuntimeCopyLocalItems->'%(RootDir)%(Directory)%(Filename).uprimarker')"
						  Condition="$([System.IO.File]::Exists('%(RootDir)%(Directory)%(Filename).uprimarker'))"
						  PublishFolderType="None" />
		</ItemGroup>

		<ItemGroup>
			<ReferenceCopyLocalPaths Include="@(_UnoPriFiles)"/>
		</ItemGroup>
	</Target>

	<!--
	Project references assets copy local support
	-->
	<PropertyGroup>
		<_UnoAddAssetsFilesToCopyLocalDependsOn>
			ContentFilesProjectOutputGroup;
			AssignTargetPaths;
			_DefineUnoPriProperties;
			$(_UnoAddAssetsFilesToCopyLocalDependsOn)
		</_UnoAddAssetsFilesToCopyLocalDependsOn>
	</PropertyGroup>

	<!--
	Target executed by every project onto its references to determine copy local assets.
	Since this target renames assets to include the project name, it must not be executed
	on the project head. On iOS, it can cause the creation of an invalid app-named
	folder, breaking the build.
	-->
	<Target Name="_UnoAddAssetsFilesToCopyLocal"
			DependsOnTargets="$(_UnoAddAssetsFilesToCopyLocalDependsOn)"
			Condition="'$(IsUnoHead)'!='true' and '$(AndroidApplication)'!='true' and '$(ProjectTypeGuids)'==''"
			BeforeTargets="GetCopyToOutputDirectoryItems">

		<ItemGroup>
			<!-- Explicit exclusion of the assets when building for a ASP.NET hosted server project -->
			<_UnoBootstrapServerReference Include="@(PackageReference)" Condition="'%(Identity)'=='Uno.Wasm.Bootstrap.Server'" />
		</ItemGroup>

		<ItemGroup Condition="'@(_UnoBootstrapServerReference)'==''">
			<_AllChildProjectItemsWithTargetPath Include="@(ContentFilesProjectOutputGroupOutput)">
				<!-- Update link metadata only if available, prefer TargetPath otherwise -->
				<Link Condition="'%(ContentFilesProjectOutputGroupOutput.Link)' != ''">$(UnoPriInitialPath)$(_UnoDirectorySeparator)%(ContentFilesProjectOutputGroupOutput.Link)</Link>
				<TargetPath Condition="'$(UnoPriInitialPath)' != ''">$(UnoPriInitialPath)$(_UnoDirectorySeparator)%(ContentFilesProjectOutputGroupOutput.TargetPath)</TargetPath>
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			</_AllChildProjectItemsWithTargetPath>

			<ContentFilesProjectOutputGroupOutput Remove="@(_AllChildProjectItemsWithTargetPath)" />
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<_UnoAddAssetsFilesToPublishDirectoryDependsOn>
			ContentFilesProjectOutputGroup;
			AssignTargetPaths;
			_DefineUnoPriProperties;
			$(_UnoAddAssetsFilesToPublishDirectoryDependsOn)
		</_UnoAddAssetsFilesToPublishDirectoryDependsOn>
	</PropertyGroup>

	<!--
	Target executed by every project onto its references to determine publish assets.
	Since this target renames assets to include the project name, it must not be executed
	on the project head.
	-->
	<Target Name="_UnoAddAssetsFilesToPublishDirectory"
			DependsOnTargets="$(_UnoAddAssetsFilesToPublishDirectoryDependsOn)"
			Condition="'$(IsUnoHead)'!='true' and '$(AndroidApplication)'!='true' and '$(ProjectTypeGuids)'==''"
			BeforeTargets="GetCopyToPublishDirectoryItems">

		<ItemGroup>
			<!-- Explicit exclusion of the assets when building for a ASP.NET hosted server project -->
			<_UnoBootstrapServerReference Include="@(PackageReference)" Condition="'%(Identity)'=='Uno.Wasm.Bootstrap.Server'" />
		</ItemGroup>

		<ItemGroup Condition="'@(_UnoBootstrapServerReference)'==''">
			<_AllChildProjectPublishItemsWithTargetPath Include="@(ContentWithTargetPath)">
				<!-- Update link metadata only if available, prefer TargetPath otherwise -->
				<Link Condition="'%(ContentWithTargetPath.Link)' != ''">$(UnoPriInitialPath)$(_UnoDirectorySeparator)%(ContentWithTargetPath.Link)</Link>
				<TargetPath Condition="'$(UnoPriInitialPath)' != ''">$(UnoPriInitialPath)$(_UnoDirectorySeparator)%(ContentWithTargetPath.TargetPath)</TargetPath>
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</_AllChildProjectPublishItemsWithTargetPath>

			<ContentWithTargetPath Remove="@(_AllChildProjectPublishItemsWithTargetPath)" />
		</ItemGroup>
	</Target>

	<!--
	Adjust support for build output for Uno.Wasm.Bootstrap, because earlier
	versions (3.x) don't support TargetPath metadata.	
	-->
	<Target Name="_UnoWasmContentAdjust"
			Condition="'$(WasmShellSupportsBuildOutputGroups)'!='true'"
			DependsOnTargets="GetCopyToOutputDirectoryItems"
			BeforeTargets="BuildDist">
		<ItemGroup>
			<Content Include="@(_SourceItemsToCopyToOutputDirectory)"
					 Condition="'%(_SourceItemsToCopyToOutputDirectory.TargetPath)'!=''"
					 Link="%(_SourceItemsToCopyToOutputDirectory.TargetPath)" />
		</ItemGroup>
	</Target>

	<!--
	Ensure that project transitive references are copied to the publish directory, as well
	as nuget packages content.
	-->
	<Target Name="_UnoAssetsGetCopyToPublishDirectory"
			BeforeTargets="GetCopyToPublishDirectoryItems"
			Condition=" '$(UsingMicrosoftNETSdkWebAssembly)' != 'true' ">
		<ItemGroup>
			<ContentWithTargetPath Include="@(_TransitiveItemsToCopyToOutputDirectory)">
				<TargetPath>%(TargetPath)</TargetPath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</ContentWithTargetPath>
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<UnoGenerateAssetsManifestDependsOn>
			$(UnoGenerateAssetsManifestDependsOn);
			_UnoAssetsGetCopyToPublishDirectoryItems
		</UnoGenerateAssetsManifestDependsOn>
	</PropertyGroup>

	<!--
	Ensure that project transitive references are copied to the publish directory, as well
	as nuget packages content.
	-->
	<Target Name="_UnoAssetsGetCopyToPublishDirectoryItems"
			DependsOnTargets="_UnoGetCopyToOutputItems"
			Condition=" '$(UsingMicrosoftNETSdkWebAssembly)' == 'true' ">

		<ItemGroup Condition=" @(UnoAllCopyToOutputItems->Count()) > 0">
			<_UnoTransitiveItems Include="@(UnoAllCopyToOutputItems)">
				<!-- set the ContentRoot using GetDirectoryName -->
				<ContentRoot>$([System.IO.Path]::GetDirectoryName('%(FullPath)'))</ContentRoot>
				<Link>wwwroot/$(WasmShellOutputPackagePath)/%(TargetPath)</Link>
				<TargetPath></TargetPath>
			</_UnoTransitiveItems>

			<_UnoTransitiveItems Remove="@(StaticWebAsset)" Condition="'%(StaticWebAsset.Link)' == '%(_UnoTransitiveItems.Link)'" />
		</ItemGroup>

		<DefineStaticWebAssets
			CandidateAssets="@(_UnoTransitiveItems)"
			FingerprintCandidates="$(StaticWebAssetsFingerprintContent)"
			FingerprintPatterns="@(StaticWebAssetFingerprintPattern)"
			RelativePathPattern="wwwroot/**"
			SourceType="Discovered"
			SourceId="$(PackageId)"
			ContentRoot="$(MSBuildProjectDirectory)\wwwroot\"
			BasePath="$(StaticWebAssetBasePath)"
			AssetMergeSource="$(StaticWebAssetMergeTarget)">
			<Output TaskParameter="Assets" ItemName="_UnoTransitiveItems_StaticWebAsset" />
		</DefineStaticWebAssets>

		<RemoveDuplicates Inputs="@(StaticWebAsset);@(_UnoTransitiveItems_StaticWebAsset)">
			<Output TaskParameter="Filtered" ItemName="_UnoTransitiveItems_Unique_StaticWebAsset"/>
		</RemoveDuplicates>

		<ItemGroup>
			<StaticWebAsset Remove="@(StaticWebAsset)" />
			<StaticWebAsset Include="@(_UnoTransitiveItems_Unique_StaticWebAsset)" />

			<_UnoTransitiveItems_Unique_StaticWebAsset Remove="@(_UnoTransitiveItems_Unique_StaticWebAsset)" />
			<_UnoTransitiveItems_Unique_StaticWebAsset Remove="@(_UnoTransitiveItems_StaticWebAsset)" />
		</ItemGroup>

		<DefineStaticWebAssetEndpoints
			  CandidateAssets="@(StaticWebAsset)"
			  ExistingEndpoints="@(StaticWebAssetEndpoint)"
			  ContentTypeMappings="@(StaticWebAssetContentTypeMapping)"
			>
			<Output TaskParameter="Endpoints" ItemName="StaticWebAssetEndpoint" />
		</DefineStaticWebAssetEndpoints>

	</Target>

	<!-- 
	Recursively get all copy to publish items.
	
	This is a clone of GetCopyToPublishDirectoryItems, but without the original 
	dependencies that may cause invalid chains of targets evaluations.
	-->
	<Target Name="_UnoGetCopyToOutputItems"
				Returns="@(UnoAllCopyToOutputItems)"
				KeepDuplicateOutputs="false"
				DependsOnTargets="AssignTargetPaths;AssignTargetPaths;_GetProjectReferenceTargetFrameworkProperties">

		<PropertyGroup>
			<_UnoGCKeepMetadata>CopyToPublishDirectory;ExcludeFromSingleFile;TargetPath</_UnoGCKeepMetadata>
		</PropertyGroup>

		<MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
			Targets="GetCopyToPublishDirectoryItems"
			BuildInParallel="$(BuildInParallel)"
			Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform); %(_MSBuildProjectReferenceExistent.SetTargetFramework)"
			Condition="'@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToPublishDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false'"
			ContinueOnError="$(ContinueOnError)"
			RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)">

			<Output TaskParameter="TargetOutputs" ItemName="_UnoAllChildProjectItemsWithTargetPath"/>
		</MSBuild>

		<ItemGroup>
			<_UnoSourceItemsToCopy
				KeepDuplicates="false"
				KeepMetadata="$(_UnoGCKeepMetadata)"
				Include="@(_UnoAllChildProjectItemsWithTargetPath->'%(FullPath)')"
				Condition="'%(_UnoAllChildProjectItemsWithTargetPath.CopyToPublishDirectory)'!='Never'"/>

			<UnoAllCopyToOutputItems Include="@(_UnoSourceItemsToCopy->'%(FullPath)')"/>
		</ItemGroup>
	</Target>
</Project>
