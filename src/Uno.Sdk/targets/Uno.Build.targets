<Project>
	<!-- Uno Developers should comment this target out if they need to override UnoVersion for dev testing -->
	<Target Name="UnoSdkVersionCheck"
			AfterTargets="ResolveReferences"
			BeforeTargets="BeforeBuild"
			Condition="'$(PkgUno_WinUI)' != ''">
		<Error Code="UNOB0004"
			HelpLink="https://aka.platform.uno/UNOB0004"
			Text="The '%24(UnoVersion)' property must match the version of the Uno.Sdk defined in global.json (found $(UnoVersion) and expected DefaultUnoVersion). For more information about updating Uno Platform packages, visit https://aka.platform.uno/upgrade-uno-packages"
			Condition=" '$(UnoVersion)' != 'DefaultUnoVersion' " />

		<!-- Check if the Uno.WinUI version matches DefaultUnoVersion -->
		<PropertyGroup>
			<_UnoSdkVersionCheck_Resolved_UnoWinUI>$([System.IO.Path]::GetFileName($(PkgUno_WinUI)))</_UnoSdkVersionCheck_Resolved_UnoWinUI>
		</PropertyGroup>

		<Error Code="UNOB0005"
			HelpLink="https://aka.platform.uno/UNOB0005"
			Text="The version of Uno.WinUI must match the version of the Uno.Sdk found in global.json (found $(_UnoSdkVersionCheck_Resolved_UnoWinUI) and expected DefaultUnoVersion). If the version was recently changed in global.json, make sure to restart your IDE. For more information about updating Uno Platform packages, visit https://aka.platform.uno/upgrade-uno-packages"
			Condition="$(_UnoSdkVersionCheck_Resolved_UnoWinUI) != 'DefaultUnoVersion'" />
	</Target>

	<!--
		This prevents other targets from accidently picking up files that are in the Platforms 
		directory but not part of the current TargetFramework
	-->
	<Target Name="RemoveUnoSingleProjectPlatformFiles"
		BeforeTargets="PrepareForBuild"
		Condition=" $(_IsUnoSingleProjectAndLegacy) == 'true' ">
		<ItemGroup>
			<None Remove="@(_IgnorePlatformFiles)" />
			<Page Remove="@(_IgnorePlatformFiles)" />
			<Compile Remove="@(_IgnorePlatformFiles)" />
			<Content Remove="@(_IgnorePlatformFiles)" />
			<EmbeddedResource Remove="@(_IgnorePlatformFiles)" />
			<Manifest Remove="@(_IgnorePlatformFiles)" />
			<AppxManifest Remove="@(_IgnorePlatformFiles)" />
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<!-- Restore targets -->
		<UnoRemoveUnsupportedTargetFrameworks_BeforeTargets>
			_LoadRestoreGraphEntryPoints
			;_GetRestoreTargetFrameworksOutput
			;UnoImplicitPackages
			;_GetRestoreTargetFrameworksAsItems
			;$(UnoRemoveUnsupportedTargetFrameworks_BeforeTargets)
		</UnoRemoveUnsupportedTargetFrameworks_BeforeTargets>
		
		<!-- Build targets -->
		<UnoRemoveUnsupportedTargetFrameworks_BeforeTargets>
			GetAllRuntimeIdentifiers
			;_GetRestoreTargetFrameworksOutput
			;_ComputeTargetFrameworkItems
			;$(UnoRemoveUnsupportedTargetFrameworks_BeforeTargets)
		</UnoRemoveUnsupportedTargetFrameworks_BeforeTargets>
	</PropertyGroup>

	<Target Name="UnoRemoveUnsupportedTargetFrameworks"
			Condition=" '$(UnoDisableRemoveUnsupportedTargetFrameworks)' != 'true' "
			BeforeTargets="$(UnoRemoveUnsupportedTargetFrameworks_BeforeTargets)">

		<!-- 
			This target suppresses unavailable targets for the current system.

			As of 2024-03-21, iOS/Catalyst are not supported on Linux, and Windows is not supported on non-Windows systems.      
		-->

		<ItemGroup>
			<!-- Create a group that contains TFs with their identifiers -->
			<_TargetFrameworksAsGroup Include="$(TargetFrameworks)" />
			<_TargetFrameworksAsGroup 
				Update="@(_TargetFrameworksAsGroup)"
				PlatformIdentifier="$([MSBuild]::GetTargetPlatformIdentifier(%(_TargetFrameworksAsGroup.Identity)))" />
		</ItemGroup>

		<ItemGroup Condition="$([MSBuild]::IsOSPlatform('linux'))">
			<!-- Filter unsupported linux targets -->
			<_TargetFrameworksToRemove 
				Include="@(_TargetFrameworksAsGroup)"
				Condition="
				'%(_TargetFrameworksAsGroup.PlatformIdentifier)' == 'ios'
				OR '%(_TargetFrameworksAsGroup.PlatformIdentifier)' == 'maccatalyst'
				" />
		</ItemGroup>

		<ItemGroup Condition="!$([MSBuild]::IsOSPlatform('windows'))">
			<!-- Filter windows out of unsupported targets -->
			<_TargetFrameworksToRemove 
				Include="@(_TargetFrameworksAsGroup)"
				Condition="'%(_TargetFrameworksAsGroup.PlatformIdentifier)' == 'windows'" />
		</ItemGroup>

		<ItemGroup>
			<_TargetFrameworksAsGroup Remove="@(_TargetFrameworksToRemove)" />
		</ItemGroup>

		<Message 
			Importance="Low" 
			Text="The following targets frameworks are skipped because they are not supported on this system: @(_TargetFrameworksToRemove)" />

		<!-- Create a global property from the filtered targets -->
		<CreateProperty Value="@(_TargetFrameworksAsGroup)">
			<Output
				TaskParameter="Value"
				PropertyName="TargetFrameworks" />
		</CreateProperty>

		<ItemGroup>
			<_TargetFrameworksAsGroup Remove="@(_TargetFrameworksAsGroup)" />
		</ItemGroup>
	</Target>

	
	<Target Name="UnoFailOnUnsupportedTargetFrameworks"
			Condition=" '$(UnoDisableRemoveUnsupportedTargetFrameworks)' != 'true' "
			BeforeTargets="BeforeBuild">

			<!-- 
				This target is primarily used for Rider, which does not support 
				UnoRemoveUnsupportedTargetFrameworks to filter frameworks.
			-->

			<Error Code="UNOB0014"
				HelpLink="https://aka.platform.uno/UNOB0014"
				Text="Building for Windows is not supported on non-Windows systems. See for more details: https://aka.platform.uno/UNOB0014"
				Condition="
					!$([MSBuild]::IsOSPlatform('windows'))
					AND '$(IsUnoHead)' == 'true'
					AND '$(IsWinAppSdk)' == 'true' " />

			<Error Code="UNOB0014"
				HelpLink="https://aka.platform.uno/UNOB0014"
				Text="Building for Apple platforms is not supported on Linux. See for more details: https://aka.platform.uno/UNOB0014"
				Condition="
					$([MSBuild]::IsOSPlatform('linux'))
					AND (
						$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework))) == 'ios'
						OR $([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework))) == 'maccatalyst'
					)" />

	</Target>

	<Target Name="UnoDumpTargetFrameworks">
		<!--
			This target is used to dump the target frameworks to the output window.
			It is useful to determine all target frameworks used by all projects of a solution.
		-->
		<Message Text="&lt;TargetFrameworks&gt;$(TargetFramework);$(TargetFrameworks)&lt;/TargetFrameworks&gt;" Importance="High" />
		<WriteLinesToFile
			Condition="$(UnoDumpTargetFrameworksTargetFile) != ''"
			File="$(UnoDumpTargetFrameworksTargetFile)"
			Lines="$(TargetFramework);$(TargetFrameworks)"
			Overwrite="false"
			Encoding="Unicode"/>
	</Target>

	<Import Project="Uno.SingleProject.VS.Build.targets"
			Condition=" '$(UnoSingleProject)' == 'true' AND '$(BuildingInsideVisualStudio)' == 'true' " />
</Project>
