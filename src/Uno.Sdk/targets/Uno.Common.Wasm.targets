<Project>
	<PropertyGroup>
		<IsBrowserWasm>true</IsBrowserWasm>
		<UsingUnoCommonWasmTargets>true</UsingUnoCommonWasmTargets>
		<UnoRuntimeIdentifier>WebAssembly</UnoRuntimeIdentifier>

		<EnableDefaultWasmItems Condition="$(EnableDefaultWasmItems) == ''">false</EnableDefaultWasmItems>

		<!-- Enable the netx.0-browserwasm target -->
		<TargetPlatformIdentifier>BrowserWasm</TargetPlatformIdentifier>
		<TargetFrameworkIdentifier>BrowserWasm</TargetFrameworkIdentifier>
		<TargetPlatformSupported>true</TargetPlatformSupported>
		<TargetPlatformVersion>1.0</TargetPlatformVersion>
		<SupportedOSPlatformVersion Condition=" '$(SupportedOSPlatformVersion)' == '' ">1.0</SupportedOSPlatformVersion>

		<OutputType Condition=" $(OutputType) == 'Exe' AND $(OutputType) != $(_InitialOutputType)">$([MSBuild]::ValueOrDefault('$(_InitialOutputType)', 'Library'))</OutputType>

		<IsMSALSupported>true</IsMSALSupported>
	</PropertyGroup>

	<PropertyGroup>
		<_RequiresILLinkPack>true</_RequiresILLinkPack>
	</PropertyGroup>

	<!-- Enable the netx.0-browserwasm target -->
	<ItemGroup>
		<SupportedPlatform Remove="@(SupportedPlatform)" />
		<SupportedPlatform Include="browserwasm" />
		<SdkSupportedTargetPlatformVersion Include="$(TargetPlatformVersion)" />
	</ItemGroup>

	<!-- Enable the netx.0-browserwasm target -->
	<ItemGroup Condition=" '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '8.0')) ">
		<SdkSupportedTargetPlatformIdentifier Include="browserwasm" DisplayName="BrowserWasm" />
	</ItemGroup>

	<Target Name="_UnoRemoveWebSdkConfigContent"
			Condition=" '$(UnoDisableRemoveWebSdkConfigContent)' != 'true' "
			BeforeTargets="BeforeBuild;CheckForDuplicateItems">
		<ItemGroup>
			<!-- 
			Prevent .json and .config files from being included and conflict 
			with other target framework `Content` items handling.

			See https://github.com/dotnet/sdk/blob/e3c62139dd25af2b7593a2cde702261f20822e47/src/StaticWebAssetsSdk/Sdk/Sdk.StaticWebAssets.StaticAssets.ProjectSystem.props#L36
				-->
			
			<!-- Get all files included by the Web Sdk, except ones from the Assets folder -->
			<_ContentToUpdate
				Include="@(Content)"
				IsWebSdk="true"
				Exclude="$(AssetsFolder)**"
				Condition="'%(Content.DefiningProjectDirectory)'!='' AND $([System.String]::Copy(%(Content.DefiningProjectDirectory)).Contains('Microsoft.NET.Sdk.StaticWebAssets'))" />

			<!-- Get all files included by everything else, except ones from the Assets folder -->
			<_NonWebSdkContent
				Include="@(Content)"
				Exclude="$(AssetsFolder)**"
				Condition="'%(Content.DefiningProjectDirectory)'!='' AND !$([System.String]::Copy(%(Content.DefiningProjectDirectory)).Contains('Microsoft.NET.Sdk.StaticWebAssets'))" />

			<!-- Remove the files Web SDK included files. This will also remove duplicates, regardless of the metadata -->
			<Content Remove="@(_ContentToUpdate)"
					 Condition="'%(_ContentToUpdate.IsWebSdk)'=='true' AND '%(_ContentToUpdate.IsDefaultItem)'!='true'" />
			
			<!-- Add back the non-websdk content -->
			<Content Include="@(_NonWebSdkContent)" KeepDuplicates="false" />

			<!-- Cleanup -->
			<_ContentToUpdate Remove="@(_ContentToUpdate)"/>
			<_NonWebSdkContent Remove="@(_NonWebSdkContent)"/>
		</ItemGroup>
	</Target>

	<Target Name="_UnoFilterWebSdkGlobalUsings"
			Condition=" '$(Optimize)' == 'true' AND '$(UnoDisableFilterWebSdkGlobalUsings)' != 'true' "
			BeforeTargets="BeforeBuild">
		<ItemGroup>
			<!-- 
			Remove all the usings included by the Microsoft.NET.Sdk.Web SDK. Note that 
			`DefiningProjectDirectory` is not available when used from a global itemgroup, but is 
			available from an target.
			-->
			<_RemoveWebSDKUsing Include="@(Using)" Condition="'%(Using.DefiningProjectDirectory)'!='' AND $([System.String]::Copy(%(Using.DefiningProjectDirectory)).Contains('Microsoft.NET.Sdk.Web'))" />
			<Using Remove="@(_RemoveWebSDKUsing)" />
			<_RemoveWebSDKUsing Remove="@(_RemoveWebSDKUsing)"/>
		</ItemGroup>
	</Target>

	<Target Name="_UnoGenerateGlobalUsingsMock"
			BeforeTargets="CoreCompile"
			DependsOnTargets="_UnoFilterWebSdkGlobalUsings"
			Condition=" '$(Optimize)' != 'true' AND '$(UnoDisableGenerateGlobalUsingsMock)'!='true' ">
		<!-- 
			This target is present to work around global usings that provided by the .NET Web SDK
			that we cannot remove reliably, particular during Hot Reload. 
			As a workaround we generate a temporary file that contains the namespaces and private 
			types that will make global using namespaces valid at compile time.
		-->

		<PropertyGroup>
			<_FakeGlobalUsingsFile>$(IntermediateOutputPath)/FakeGlobalUsings.g.cs</_FakeGlobalUsingsFile>
			<_FakeGlobalUsingsAssemblyName>$(AssemblyName.Replace('.','_'))</_FakeGlobalUsingsAssemblyName>
		</PropertyGroup>

		<ItemGroup>
			<_UsingsDedup Include="%(Using.Identity)" KeepDuplicates="false" />
			<_GlobalUsingMocksLines Include="@(_UsingsDedup->'namespace %(Identity) { class __HotReloadWorkaround__$(_FakeGlobalUsingsAssemblyName) { } }')" />
		</ItemGroup>

		<WriteLinesToFile File="$(_FakeGlobalUsingsFile)" Lines="@(_GlobalUsingMocksLines)" WriteOnlyWhenDifferent="true" Overwrite="true" />

		<ItemGroup>
			<Compile Include="$(_FakeGlobalUsingsFile)" Visible="False" />
			<FileWrites Include="$(_FakeGlobalUsingsFile)" />

			<_GlobalUsingMocksLines Remove="@(_GlobalUsingMocksLines)" />
			<_UsingsDedup Remove="@(_UsingsDedup)" />
		</ItemGroup>
	</Target>


	<Import Project="$(MSBuildThisFileDirectory)..\targets\Uno.SingleProject.Wasm.targets"
			Condition=" $(_IsUnoSingleProjectAndLegacy) == 'true' " />
</Project>
