<Project>
	<PropertyGroup>
		<UseWinUI>true</UseWinUI>

		<!-- Follow the Android, iOS, & MacCatalyst SDK's -->
		<!-- Default to 1, if blank -->
		<ApplicationVersion Condition=" '$(ApplicationVersion)' == '' ">1</ApplicationVersion>
		<Version Condition=" $([System.Version]::TryParse ('$(ApplicationDisplayVersion)', $([System.Version]::Parse('1.0')))) ">$(ApplicationDisplayVersion)</Version>
		<ApplicationDisplayVersion Condition=" '$(ApplicationDisplayVersion)' == '' ">$(Version)</ApplicationDisplayVersion>
	</PropertyGroup>

	<PropertyGroup Condition=" '$(IsUnoHead)' == 'true' ">
		<OutputType>WinExe</OutputType>
		<!-- Bundles the WinAppSDK binaries -->
		<WindowsAppSDKSelfContained Condition="$(WindowsAppSDKSelfContained) == ''">true</WindowsAppSDKSelfContained>
	</PropertyGroup>

	<PropertyGroup>
		<ApplicationManifest Condition="$(ApplicationManifest) == '' AND Exists('$(WindowsProjectFolder)app.manifest')">$(WindowsProjectFolder)app.manifest</ApplicationManifest>
		<ApplicationManifest Condition="$(ApplicationManifest) == '' AND Exists('app.manifest')">app.manifest</ApplicationManifest>
		<Platforms Condition=" $(Platforms) == '' ">x86;x64;arm64</Platforms>
	</PropertyGroup>

	<PropertyGroup Condition="$(WindowsAppxManifestPath) == ''">
		<WindowsAppxManifestPath>$(WindowsProjectFolder)Package.appxmanifest</WindowsAppxManifestPath>
		<WindowsAppxManifestPath Condition="!Exists($(WindowsAppxManifestPath)) and Exists('Package.appxmanifest')">Package.appxmanifest</WindowsAppxManifestPath>
	</PropertyGroup>

	<PropertyGroup Condition="$(WindowsPackageType) == ''">
		<WindowsPackageType Condition="'$(WindowsPackageType)'=='' and Exists('$(WindowsAppxManifestPath)')">MSIX</WindowsPackageType>
		<WindowsPackageType Condition="'$(WindowsPackageType)'==''">None</WindowsPackageType>
	</PropertyGroup>

	<PropertyGroup Condition="'$(WindowsPackageType)' == 'MSIX'">
		<DefineConstants>$(DefineConstants);WINAPPSDK_PACKAGED</DefineConstants>
	</PropertyGroup>

	<ItemGroup>
		<!-- Exclude Manifest items that have already been added to avoid duplicates -->
		<Manifest Include="$(ApplicationManifest)"
			Exclude="@(Manifest)"
			IsDefaultItem="true"
			Condition="Exists('$(ApplicationManifest)')" />
	</ItemGroup>

	<!-- Using .NET MAUI Workaround for AnyCPU https://github.com/dotnet/maui/blob/37ca0c26e39a40f14b4fd60416b90a1a62e28473/src/Workload/Microsoft.Maui.Sdk/Sdk/Microsoft.Maui.Sdk.Before.targets#L12-L22 -->
	<!-- The Windows App SDK does not support AnyCPU without a RID, so make sure we pick the "best" one we can -->
	<PropertyGroup>
		<_SingleProjectRIDRequired Condition="'$(OutputType)' == 'WinExe'">true</_SingleProjectRIDRequired>
		<_SingleProjectRIDSpecified Condition="'$(RuntimeIdentifier)' != '' or '$(RuntimeIdentifiers)' != ''">true</_SingleProjectRIDSpecified>
		<_SingleProjectRIDSpecified Condition="$(RuntimeIdentifier) == 'AnyCPU'" >false</_SingleProjectRIDSpecified>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(_SingleProjectRIDRequired)' == 'true' and '$(_SingleProjectRIDSpecified)' != 'true' ">
		<_SingleProjectHostArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</_SingleProjectHostArchitecture>
		<_SingleProjectHostArchitecture>$(_SingleProjectHostArchitecture.ToLower())</_SingleProjectHostArchitecture>
		<Platform>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</Platform>
		<RuntimeIdentifier>win-$(_SingleProjectHostArchitecture)</RuntimeIdentifier>
	</PropertyGroup>

	<PropertyGroup Condition=" '$(_SingleProjectRIDRequired)' == 'true' and $(_IsExecutable) == 'true' ">
		<PublishProfile Condition=" '$(PublishProfile)' == '' ">win-$(Platform).pubxml</PublishProfile>
	</PropertyGroup>

	<Target Name="EnsureDefaultPlatformForAnyCPU"
			BeforeTargets="ResolveReferences;ResolveProjectReferences;BeforeBuild"
			Condition="'$(Platform)' == 'AnyCPU'">
		<!-- Required to allow `dotnet build` to work without extra parameters -->
		<PropertyGroup>
			<Platform>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</Platform>
		</PropertyGroup>
	</Target>

	<!--
		Sanity Check...
		The AppxManifest should have come in automatically but if it didn't for some reason we need
		to ensure that it is added here to prevent the build from failing.
	-->
	<Target Name="_EnsureAppxManifestExists"
		BeforeTargets="_ValidateWindowsPackageType"
		Condition="'$(WindowsPackageType)' != 'None' and Exists('$(WindowsAppxManifestPath)') and  '@(AppxManifest)'==''">
		<ItemGroup>
			<AppxManifest Include="$(WindowsAppxManifestPath)"
				IsDefaultItem="true"
				SubType="Designer" />
		</ItemGroup>
	</Target>
</Project>
