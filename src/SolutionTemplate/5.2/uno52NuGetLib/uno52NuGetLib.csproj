<Project Sdk="Uno.Sdk.Private">
	<PropertyGroup>
		<TargetFrameworks>net8.0;net8.0-ios;net8.0-maccatalyst;net8.0-windows10.0.19041;net8.0-browserwasm;net8.0-desktop</TargetFrameworks>

		<!-- Disabled for https://github.com/unoplatform/uno.check/issues/241 -->
		<TargetFrameworks Condition="!$([MSBuild]::IsOSPlatform('linux'))">$(TargetFrameworks);net8.0-android</TargetFrameworks>

		<!-- Disable android on msbuild .NET Framework until android 35 is supported -->
		<TargetFrameworks Condition="'$(MSBuildRuntimeType)' == 'Full'">$(TargetFrameworks.Replace('net8.0-android',''))</TargetFrameworks>
		<TargetFrameworks Condition="'$(MSBuildRuntimeType)' == 'Full'">$(TargetFrameworks.Replace('net8.0-ios',''))</TargetFrameworks>
		<TargetFrameworks Condition="'$(MSBuildRuntimeType)' == 'Full'">$(TargetFrameworks.Replace('net8.0-maccatalyst',''))</TargetFrameworks>

		<!-- Ensures the .xr.xml files are generated in a proper layout folder -->
		<GenerateLibraryLayout>true</GenerateLibraryLayout>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<UnoSdkDebugging>true</UnoSdkDebugging>
		<OutputType>Library</OutputType>
		<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<IsPackable>true</IsPackable>
		<NoWarn>$(NoWarn);NU5104</NoWarn>
		<GenerateLibraryLayout>true</GenerateLibraryLayout>
	</PropertyGroup>

	<ItemGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">
		<!--
		If you encounter this error message:

			error NETSDK1148: A referenced assembly was compiled using a newer version of Microsoft.Windows.SDK.NET.dll.
			Please update to a newer .NET SDK in order to reference this assembly.

		This means that the two packages below must be aligned with the "build" version number of
		the "Microsoft.Windows.SDK.BuildTools" package above, and the "revision" version number
		must be the highest found in https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref.
		-->
		<!-- <FrameworkReference Update="Microsoft.Windows.SDK.NET.Ref" RuntimeFrameworkVersion="10.0.22621.28" />
		<FrameworkReference Update="Microsoft.Windows.SDK.NET.Ref" TargetingPackVersion="10.0.22621.28" /> -->
	</ItemGroup>
	<Target Name="ValidateIsPackable"
			AfterTargets="CoreCompile;Build">
		<Error Text="Expected IsPackable='true', however it actually equals '$(IsPackable)'."
			Condition="$(IsPackable) != 'true'" />
	</Target>

	<Target 
		Name="ValidatePackageDependencies"
		Condition="'$(TargetFramework)'==''"
		AfterTargets="GenerateNuspec">
		<ItemGroup>
			<ExpectedReference Include="Uno.WinUI" />
			<ExpectedReference Include="Microsoft.WindowsAppSDK" Condition="$([MSBuild]::IsOSPlatform('windows'))" />
			<ExpectedReference Include="Microsoft.Windows.SDK.BuildTools" Condition="$([MSBuild]::IsOSPlatform('windows'))" />
			<ExpectedMissingReference Include="Uno.Resizetizer" />
			<ExpectedMissingReference Include="Uno.Core.Extensions.Logging.Singleton" />
		</ItemGroup>

		<Message Importance="high" Text="Validating package references" />

		<ValidatePackageReferences
			NuGetPackOutputFiles="@(NuGetPackOutput)"
			ExpectedReferences="@(ExpectedReference)"
			ExpectedMissingReferences="@(ExpectedMissingReference)" />
	</Target>


	<Target Name="_UnoValidateSelfAssets"	
			AfterTargets="Build"
			Condition="'$(TargetFramework)'==''"
			DependsOnTargets="Pack">

		<ItemGroup>
			<!-- extract files from @(NuGetPackOutput) that end in .nupkg -->
			<_OutputNugetFile Include="@(NuGetPackOutput)" Condition="'%(Extension)' == '.nupkg'" />			
		</ItemGroup>

		<PropertyGroup>
			<_tempNuGetOutput>$(IntermediateOutputPath)__NuGetPackage</_tempNuGetOutput>
		</PropertyGroup>

		<Message Importance="high" Text="Testing packaged assets" />
		
		<!-- Decompress the _OutputNugetFile to a temp folder -->
		<UnzipArchive
			SourceFiles="@(_OutputNugetFile)"
			DestinationFolder="$(_tempNuGetOutput)" />

		<ItemGroup>
			<!-- Validates that assets are properly included -->
			<_AssetsToValidate Include="$(_tempNuGetOutput)\lib\net8.0-browserwasm1.0\uno52NuGetLib\Assets\test.xml" />
			<_AssetsToValidate Include="$(_tempNuGetOutput)\lib\net8.0-desktop1.0\uno52NuGetLib\Assets\test.xml" />
			<_AssetsToValidate Include="$(_tempNuGetOutput)\lib\net8.0-ios18.0\uno52NuGetLib\Assets\test.xml" Condition="!$([MSBuild]::IsOSPlatform('linux'))" />
			<_AssetsToValidate Include="$(_tempNuGetOutput)\lib\net8.0-android34.0\uno52NuGetLib\Assets\test.xml" Condition="!$([MSBuild]::IsOSPlatform('linux')) AND '$(MSBuildRuntimeType)' != 'Full'" />
			<_AssetsToValidate Include="$(_tempNuGetOutput)\lib\net8.0-maccatalyst18.0\uno52NuGetLib\Assets\test.xml" Condition="!$([MSBuild]::IsOSPlatform('linux'))" />
			<!--
			Assets are not properly included for winui
			<_AssetsToValidate Include="$(_tempNuGetOutput)\lib\net8.0-windows10.0.19041\uno52NuGetLib\Assets\test.xml" />
			-->
		</ItemGroup>

		<Error Text="Missing asset %(_AssetsToValidate.Identity)"
			  Condition="'@(_AssetsToValidate)'!='' AND '%(_AssetsToValidate.MustNotExist)'!='true' AND !exists('%(_AssetsToValidate.Identity)')" />

		<Error Text="Invalid existing asset %(_AssetsToValidate.Identity)"
			  Condition="'@(_AssetsToValidate)'!='' AND '%(_AssetsToValidate.MustNotExist)'=='true'  AND exists('%(_AssetsToValidate.Identity)')" />

	</Target>
	
	<!-- This is needed because xamarin.ios Unzip conflicts with msbuilds ootb one -->
	<UsingTask TaskName="UnzipArchive" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<SourceFiles ParameterType="System.String[]" Required="true" />
			<DestinationFolder ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.IO.Compression" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					if (Directory.Exists(DestinationFolder))
					{
						Directory.Delete(DestinationFolder, true);
					}
				
					foreach (var sourceFile in SourceFiles)
					{
						ZipFile.ExtractToDirectory(sourceFile, DestinationFolder);
					}
				]]>
			</Code>
		</Task>
	</UsingTask>

	<UsingTask TaskName="ValidatePackageReferences" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<NuGetPackOutputFiles ParameterType="System.String[]" Required="true" />
			<ExpectedReferences ParameterType="System.String[]" Required="true" />
			<ExpectedMissingReferences ParameterType="System.String[]" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					foreach (var outputFile in NuGetPackOutputFiles)
					{
						if (Path.GetExtension(outputFile) != ".nuspec" || outputFile.Contains(".symbols."))
						{
							continue;
						}

						if (!File.Exists(outputFile))
						{
							Log.LogError("The nuspec file '{0}' does not exist on the disk.", outputFile);
						}

						var nuspec = File.ReadAllText(outputFile);
						var dependencyStringFormat = "<dependency id=\"{0}\"";

						foreach (var expectedReference in ExpectedReferences)
						{
							if (!nuspec.Contains(string.Format(System.Globalization.CultureInfo.InvariantCulture, dependencyStringFormat, expectedReference)))
							{
								Log.LogError("Missing expected package dependency: {0}", expectedReference);
							}
							else
							{
								Log.LogMessage(MessageImportance.High, "Found package dependency for: {0}.", expectedReference);
							}
						}

						foreach (var expectedMissingReference in ExpectedMissingReferences)
						{
							if (nuspec.Contains(string.Format(System.Globalization.CultureInfo.InvariantCulture, dependencyStringFormat, expectedMissingReference)))
							{
								Log.LogError("Found package dependency for: {0}.", expectedMissingReference);
							}
							else
							{
								Log.LogMessage(MessageImportance.High, "Confirmed no package dependency for: {0}", expectedMissingReference);
							}
						}
					}
				]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
