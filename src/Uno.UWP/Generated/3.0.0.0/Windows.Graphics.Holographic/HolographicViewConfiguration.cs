// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Graphics.Holographic
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class HolographicViewConfiguration
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal HolographicViewConfiguration()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.DirectX.DirectXPixelFormat PixelFormat
		{
			get
			{
				throw new global::System.NotImplementedException("The member DirectXPixelFormat HolographicViewConfiguration.PixelFormat is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DirectXPixelFormat%20HolographicViewConfiguration.PixelFormat");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Graphics.Holographic.HolographicViewConfiguration", "DirectXPixelFormat HolographicViewConfiguration.PixelFormat");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool HolographicViewConfiguration.IsEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HolographicViewConfiguration.IsEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Graphics.Holographic.HolographicViewConfiguration", "bool HolographicViewConfiguration.IsEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.Holographic.HolographicDisplay Display
		{
			get
			{
				throw new global::System.NotImplementedException("The member HolographicDisplay HolographicViewConfiguration.Display is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=HolographicDisplay%20HolographicViewConfiguration.Display");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsStereo
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool HolographicViewConfiguration.IsStereo is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HolographicViewConfiguration.IsStereo");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.Holographic.HolographicViewConfigurationKind Kind
		{
			get
			{
				throw new global::System.NotImplementedException("The member HolographicViewConfigurationKind HolographicViewConfiguration.Kind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=HolographicViewConfigurationKind%20HolographicViewConfiguration.Kind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size NativeRenderTargetSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size HolographicViewConfiguration.NativeRenderTargetSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20HolographicViewConfiguration.NativeRenderTargetSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double RefreshRate
		{
			get
			{
				throw new global::System.NotImplementedException("The member double HolographicViewConfiguration.RefreshRate is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20HolographicViewConfiguration.RefreshRate");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size RenderTargetSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size HolographicViewConfiguration.RenderTargetSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20HolographicViewConfiguration.RenderTargetSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Graphics.DirectX.DirectXPixelFormat> SupportedPixelFormats
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<DirectXPixelFormat> HolographicViewConfiguration.SupportedPixelFormats is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CDirectXPixelFormat%3E%20HolographicViewConfiguration.SupportedPixelFormats");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Graphics.Holographic.HolographicDepthReprojectionMethod> SupportedDepthReprojectionMethods
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<HolographicDepthReprojectionMethod> HolographicViewConfiguration.SupportedDepthReprojectionMethods is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CHolographicDepthReprojectionMethod%3E%20HolographicViewConfiguration.SupportedDepthReprojectionMethods");
			}
		}
#endif
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.NativeRenderTargetSize.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.RenderTargetSize.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size RequestRenderTargetSize(global::Windows.Foundation.Size size)
		{
			throw new global::System.NotImplementedException("The member Size HolographicViewConfiguration.RequestRenderTargetSize(Size size) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20HolographicViewConfiguration.RequestRenderTargetSize%28Size%20size%29");
		}
#endif
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.SupportedPixelFormats.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.PixelFormat.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.PixelFormat.set
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.IsStereo.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.RefreshRate.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.Kind.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.Display.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.IsEnabled.get
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.IsEnabled.set
		// Forced skipping of method Windows.Graphics.Holographic.HolographicViewConfiguration.SupportedDepthReprojectionMethods.get
	}
}
