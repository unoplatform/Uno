// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Security.Cryptography.Certificates
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class Certificate
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string FriendlyName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.FriendlyName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.FriendlyName");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.Cryptography.Certificates.Certificate", "string Certificate.FriendlyName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<string> EnhancedKeyUsages
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<string> Certificate.EnhancedKeyUsages is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cstring%3E%20Certificate.EnhancedKeyUsages");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasPrivateKey
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool Certificate.HasPrivateKey is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20Certificate.HasPrivateKey");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsStronglyProtected
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool Certificate.IsStronglyProtected is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20Certificate.IsStronglyProtected");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Issuer
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.Issuer is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.Issuer");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte[] SerialNumber
		{
			get
			{
				throw new global::System.NotImplementedException("The member byte[] Certificate.SerialNumber is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%5B%5D%20Certificate.SerialNumber");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Subject
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.Subject is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.Subject");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.DateTimeOffset ValidFrom
		{
			get
			{
				throw new global::System.NotImplementedException("The member DateTimeOffset Certificate.ValidFrom is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DateTimeOffset%20Certificate.ValidFrom");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.DateTimeOffset ValidTo
		{
			get
			{
				throw new global::System.NotImplementedException("The member DateTimeOffset Certificate.ValidTo is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DateTimeOffset%20Certificate.ValidTo");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsSecurityDeviceBound
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool Certificate.IsSecurityDeviceBound is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20Certificate.IsSecurityDeviceBound");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string KeyAlgorithmName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.KeyAlgorithmName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.KeyAlgorithmName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.Cryptography.Certificates.CertificateKeyUsages KeyUsages
		{
			get
			{
				throw new global::System.NotImplementedException("The member CertificateKeyUsages Certificate.KeyUsages is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=CertificateKeyUsages%20Certificate.KeyUsages");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string SignatureAlgorithmName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.SignatureAlgorithmName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.SignatureAlgorithmName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string SignatureHashAlgorithmName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.SignatureHashAlgorithmName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.SignatureHashAlgorithmName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo SubjectAlternativeName
		{
			get
			{
				throw new global::System.NotImplementedException("The member SubjectAlternativeNameInfo Certificate.SubjectAlternativeName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SubjectAlternativeNameInfo%20Certificate.SubjectAlternativeName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsPerUser
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool Certificate.IsPerUser is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20Certificate.IsPerUser");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string KeyStorageProviderName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.KeyStorageProviderName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.KeyStorageProviderName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string StoreName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Certificate.StoreName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Certificate.StoreName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public Certificate(global::Windows.Storage.Streams.IBuffer certBlob)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.Cryptography.Certificates.Certificate", "Certificate.Certificate(IBuffer certBlob)");
		}
#endif
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.Certificate(Windows.Storage.Streams.IBuffer)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Security.Cryptography.Certificates.CertificateChain> BuildChainAsync(global::System.Collections.Generic.IEnumerable<global::Windows.Security.Cryptography.Certificates.Certificate> certificates)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<CertificateChain> Certificate.BuildChainAsync(IEnumerable<Certificate> certificates) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CCertificateChain%3E%20Certificate.BuildChainAsync%28IEnumerable%3CCertificate%3E%20certificates%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Security.Cryptography.Certificates.CertificateChain> BuildChainAsync(global::System.Collections.Generic.IEnumerable<global::Windows.Security.Cryptography.Certificates.Certificate> certificates, global::Windows.Security.Cryptography.Certificates.ChainBuildingParameters parameters)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<CertificateChain> Certificate.BuildChainAsync(IEnumerable<Certificate> certificates, ChainBuildingParameters parameters) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CCertificateChain%3E%20Certificate.BuildChainAsync%28IEnumerable%3CCertificate%3E%20certificates%2C%20ChainBuildingParameters%20parameters%29");
		}
#endif
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.SerialNumber.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte[] GetHashValue()
		{
			throw new global::System.NotImplementedException("The member byte[] Certificate.GetHashValue() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%5B%5D%20Certificate.GetHashValue%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte[] GetHashValue(string hashAlgorithmName)
		{
			throw new global::System.NotImplementedException("The member byte[] Certificate.GetHashValue(string hashAlgorithmName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%5B%5D%20Certificate.GetHashValue%28string%20hashAlgorithmName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Streams.IBuffer GetCertificateBlob()
		{
			throw new global::System.NotImplementedException("The member IBuffer Certificate.GetCertificateBlob() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IBuffer%20Certificate.GetCertificateBlob%28%29");
		}
#endif
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.Subject.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.Issuer.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.HasPrivateKey.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.IsStronglyProtected.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.ValidFrom.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.ValidTo.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.EnhancedKeyUsages.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.FriendlyName.set
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.FriendlyName.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.IsSecurityDeviceBound.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.KeyUsages.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.KeyAlgorithmName.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.SignatureAlgorithmName.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.SignatureHashAlgorithmName.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.SubjectAlternativeName.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.IsPerUser.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.StoreName.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.Certificate.KeyStorageProviderName.get
	}
}
