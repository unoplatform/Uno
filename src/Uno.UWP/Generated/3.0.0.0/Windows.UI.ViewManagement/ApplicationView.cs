// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.ViewManagement
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class ApplicationView
	{
#if false || __IOS__ || IS_UNIT_TESTS || false || false || __NETSTD_REFERENCE__ || false
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__NETSTD_REFERENCE__")]
		public string Title
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ApplicationView.Title is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ApplicationView.Title");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "string ApplicationView.Title");
			}
		}
#endif
#if false || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsScreenCaptureEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ApplicationView.IsScreenCaptureEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.IsScreenCaptureEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "bool ApplicationView.IsScreenCaptureEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool AdjacentToLeftDisplayEdge
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ApplicationView.AdjacentToLeftDisplayEdge is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.AdjacentToLeftDisplayEdge");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool AdjacentToRightDisplayEdge
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ApplicationView.AdjacentToRightDisplayEdge is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.AdjacentToRightDisplayEdge");
			}
		}
#endif
		// Skipping already declared property Id
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || false
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__")]
		public bool IsFullScreen
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ApplicationView.IsFullScreen is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.IsFullScreen");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsOnLockScreen
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ApplicationView.IsOnLockScreen is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.IsOnLockScreen");
			}
		}
#endif
		// Skipping already declared property Orientation
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool SuppressSystemOverlays
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ApplicationView.SuppressSystemOverlays is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.SuppressSystemOverlays");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "bool ApplicationView.SuppressSystemOverlays");
			}
		}
#endif
		// Skipping already declared property VisibleBounds
		// Skipping already declared property DesiredBoundsMode
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.ViewManagement.FullScreenSystemOverlayMode FullScreenSystemOverlayMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member FullScreenSystemOverlayMode ApplicationView.FullScreenSystemOverlayMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=FullScreenSystemOverlayMode%20ApplicationView.FullScreenSystemOverlayMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "FullScreenSystemOverlayMode ApplicationView.FullScreenSystemOverlayMode");
			}
		}
#endif
		// Skipping already declared property IsFullScreenMode
		// Skipping already declared property TitleBar
		// Skipping already declared property ViewMode
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string PersistedStateId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ApplicationView.PersistedStateId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ApplicationView.PersistedStateId");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "string ApplicationView.PersistedStateId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.WindowManagement.WindowingEnvironment WindowingEnvironment
		{
			get
			{
				throw new global::System.NotImplementedException("The member WindowingEnvironment ApplicationView.WindowingEnvironment is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=WindowingEnvironment%20ApplicationView.WindowingEnvironment");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.UIContext UIContext
		{
			get
			{
				throw new global::System.NotImplementedException("The member UIContext ApplicationView.UIContext is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=UIContext%20ApplicationView.UIContext");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.ViewManagement.ApplicationViewState Value
		{
			get
			{
				throw new global::System.NotImplementedException("The member ApplicationViewState ApplicationView.Value is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ApplicationViewState%20ApplicationView.Value");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool TerminateAppOnFinalViewClose
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ApplicationView.TerminateAppOnFinalViewClose is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.TerminateAppOnFinalViewClose");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "bool ApplicationView.TerminateAppOnFinalViewClose");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.ViewManagement.ApplicationViewWindowingMode PreferredLaunchWindowingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ApplicationViewWindowingMode ApplicationView.PreferredLaunchWindowingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ApplicationViewWindowingMode%20ApplicationView.PreferredLaunchWindowingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "ApplicationViewWindowingMode ApplicationView.PreferredLaunchWindowingMode");
			}
		}
#endif
		// Skipping already declared property PreferredLaunchViewSize
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.Orientation.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.AdjacentToLeftDisplayEdge.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.AdjacentToRightDisplayEdge.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.IsFullScreen.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.IsOnLockScreen.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.IsScreenCaptureEnabled.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.IsScreenCaptureEnabled.set
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.Title.set
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.Title.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.Id.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.Consolidated.add
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.Consolidated.remove
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.SuppressSystemOverlays.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.SuppressSystemOverlays.set
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.VisibleBounds.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.VisibleBoundsChanged.add
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.VisibleBoundsChanged.remove
		// Skipping already declared method Windows.UI.ViewManagement.ApplicationView.SetDesiredBoundsMode(Windows.UI.ViewManagement.ApplicationViewBoundsMode)
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.DesiredBoundsMode.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.TitleBar.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.FullScreenSystemOverlayMode.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.FullScreenSystemOverlayMode.set
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.IsFullScreenMode.get
#if false || false || IS_UNIT_TESTS || false || false || __NETSTD_REFERENCE__ || false
		[global::Uno.NotImplemented("IS_UNIT_TESTS", "__NETSTD_REFERENCE__")]
		public bool TryEnterFullScreenMode()
		{
			throw new global::System.NotImplementedException("The member bool ApplicationView.TryEnterFullScreenMode() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.TryEnterFullScreenMode%28%29");
		}
#endif
#if false || false || IS_UNIT_TESTS || false || false || __NETSTD_REFERENCE__ || false
		[global::Uno.NotImplemented("IS_UNIT_TESTS", "__NETSTD_REFERENCE__")]
		public void ExitFullScreenMode()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "void ApplicationView.ExitFullScreenMode()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void ShowStandardSystemOverlays()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "void ApplicationView.ShowStandardSystemOverlays()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || false || __NETSTD_REFERENCE__ || false
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__NETSTD_REFERENCE__")]
		public bool TryResizeView(global::Windows.Foundation.Size value)
		{
			throw new global::System.NotImplementedException("The member bool ApplicationView.TryResizeView(Size value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.TryResizeView%28Size%20value%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || false || __NETSTD_REFERENCE__ || false
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__NETSTD_REFERENCE__")]
		public void SetPreferredMinSize(global::Windows.Foundation.Size minSize)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "void ApplicationView.SetPreferredMinSize(Size minSize)");
		}
#endif
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.ViewMode.get
		// Skipping already declared method Windows.UI.ViewManagement.ApplicationView.IsViewModeSupported(Windows.UI.ViewManagement.ApplicationViewMode)
		// Skipping already declared method Windows.UI.ViewManagement.ApplicationView.TryEnterViewModeAsync(Windows.UI.ViewManagement.ApplicationViewMode)
		// Skipping already declared method Windows.UI.ViewManagement.ApplicationView.TryEnterViewModeAsync(Windows.UI.ViewManagement.ApplicationViewMode, Windows.UI.ViewManagement.ViewModePreferences)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<bool> TryConsolidateAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<bool> ApplicationView.TryConsolidateAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Cbool%3E%20ApplicationView.TryConsolidateAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.PersistedStateId.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.PersistedStateId.set
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.WindowingEnvironment.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.WindowManagement.DisplayRegion> GetDisplayRegions()
		{
			throw new global::System.NotImplementedException("The member IReadOnlyList<DisplayRegion> ApplicationView.GetDisplayRegions() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CDisplayRegion%3E%20ApplicationView.GetDisplayRegions%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.UIContext.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void ClearAllPersistedState()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "void ApplicationView.ClearAllPersistedState()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void ClearPersistedState(string key)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.ViewManagement.ApplicationView", "void ApplicationView.ClearPersistedState(string key)");
		}
#endif
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.PreferredLaunchWindowingMode.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.PreferredLaunchWindowingMode.set
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.PreferredLaunchViewSize.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.PreferredLaunchViewSize.set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool TryUnsnapToFullscreen()
		{
			throw new global::System.NotImplementedException("The member bool ApplicationView.TryUnsnapToFullscreen() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.TryUnsnapToFullscreen%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static int GetApplicationViewIdForWindow(global::Windows.UI.Core.ICoreWindow window)
		{
			throw new global::System.NotImplementedException("The member int ApplicationView.GetApplicationViewIdForWindow(ICoreWindow window) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ApplicationView.GetApplicationViewIdForWindow%28ICoreWindow%20window%29");
		}
#endif
		// Skipping already declared method Windows.UI.ViewManagement.ApplicationView.GetForCurrentView()
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.TerminateAppOnFinalViewClose.get
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.TerminateAppOnFinalViewClose.set
		// Forced skipping of method Windows.UI.ViewManagement.ApplicationView.Value.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool TryUnsnap()
		{
			throw new global::System.NotImplementedException("The member bool ApplicationView.TryUnsnap() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ApplicationView.TryUnsnap%28%29");
		}
#endif
		// Skipping already declared event Windows.UI.ViewManagement.ApplicationView.Consolidated
		// Skipping already declared event Windows.UI.ViewManagement.ApplicationView.VisibleBoundsChanged
	}
}
