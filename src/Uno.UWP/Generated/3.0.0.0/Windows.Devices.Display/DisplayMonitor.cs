// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Display
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class DisplayMonitor
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal DisplayMonitor()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Point BluePrimary
		{
			get
			{
				throw new global::System.NotImplementedException("The member Point DisplayMonitor.BluePrimary is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Point%20DisplayMonitor.BluePrimary");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.DisplayMonitorConnectionKind ConnectionKind
		{
			get
			{
				throw new global::System.NotImplementedException("The member DisplayMonitorConnectionKind DisplayMonitor.ConnectionKind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayMonitorConnectionKind%20DisplayMonitor.ConnectionKind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DeviceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string DisplayMonitor.DeviceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20DisplayMonitor.DeviceId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DisplayAdapterDeviceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string DisplayMonitor.DisplayAdapterDeviceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20DisplayMonitor.DisplayAdapterDeviceId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.DisplayAdapterId DisplayAdapterId
		{
			get
			{
				throw new global::System.NotImplementedException("The member DisplayAdapterId DisplayMonitor.DisplayAdapterId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayAdapterId%20DisplayMonitor.DisplayAdapterId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint DisplayAdapterTargetId
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint DisplayMonitor.DisplayAdapterTargetId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20DisplayMonitor.DisplayAdapterTargetId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DisplayName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string DisplayMonitor.DisplayName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20DisplayMonitor.DisplayName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Point GreenPrimary
		{
			get
			{
				throw new global::System.NotImplementedException("The member Point DisplayMonitor.GreenPrimary is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Point%20DisplayMonitor.GreenPrimary");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float MaxAverageFullFrameLuminanceInNits
		{
			get
			{
				throw new global::System.NotImplementedException("The member float DisplayMonitor.MaxAverageFullFrameLuminanceInNits is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20DisplayMonitor.MaxAverageFullFrameLuminanceInNits");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float MaxLuminanceInNits
		{
			get
			{
				throw new global::System.NotImplementedException("The member float DisplayMonitor.MaxLuminanceInNits is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20DisplayMonitor.MaxLuminanceInNits");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float MinLuminanceInNits
		{
			get
			{
				throw new global::System.NotImplementedException("The member float DisplayMonitor.MinLuminanceInNits is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20DisplayMonitor.MinLuminanceInNits");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.SizeInt32 NativeResolutionInRawPixels
		{
			get
			{
				throw new global::System.NotImplementedException("The member SizeInt32 DisplayMonitor.NativeResolutionInRawPixels is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SizeInt32%20DisplayMonitor.NativeResolutionInRawPixels");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.DisplayMonitorPhysicalConnectorKind PhysicalConnector
		{
			get
			{
				throw new global::System.NotImplementedException("The member DisplayMonitorPhysicalConnectorKind DisplayMonitor.PhysicalConnector is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayMonitorPhysicalConnectorKind%20DisplayMonitor.PhysicalConnector");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size? PhysicalSizeInInches
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size? DisplayMonitor.PhysicalSizeInInches is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%3F%20DisplayMonitor.PhysicalSizeInInches");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float RawDpiX
		{
			get
			{
				throw new global::System.NotImplementedException("The member float DisplayMonitor.RawDpiX is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20DisplayMonitor.RawDpiX");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float RawDpiY
		{
			get
			{
				throw new global::System.NotImplementedException("The member float DisplayMonitor.RawDpiY is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20DisplayMonitor.RawDpiY");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Point RedPrimary
		{
			get
			{
				throw new global::System.NotImplementedException("The member Point DisplayMonitor.RedPrimary is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Point%20DisplayMonitor.RedPrimary");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.DisplayMonitorUsageKind UsageKind
		{
			get
			{
				throw new global::System.NotImplementedException("The member DisplayMonitorUsageKind DisplayMonitor.UsageKind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayMonitorUsageKind%20DisplayMonitor.UsageKind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Point WhitePoint
		{
			get
			{
				throw new global::System.NotImplementedException("The member Point DisplayMonitor.WhitePoint is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Point%20DisplayMonitor.WhitePoint");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDolbyVisionSupportedInHdrMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool DisplayMonitor.IsDolbyVisionSupportedInHdrMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20DisplayMonitor.IsDolbyVisionSupportedInHdrMode");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.DeviceId.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.DisplayName.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.ConnectionKind.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.PhysicalConnector.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.DisplayAdapterDeviceId.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.DisplayAdapterId.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.DisplayAdapterTargetId.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.UsageKind.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.NativeResolutionInRawPixels.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.PhysicalSizeInInches.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.RawDpiX.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.RawDpiY.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.RedPrimary.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.GreenPrimary.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.BluePrimary.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.WhitePoint.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.MaxLuminanceInNits.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.MinLuminanceInNits.get
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.MaxAverageFullFrameLuminanceInNits.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte[] GetDescriptor(global::Windows.Devices.Display.DisplayMonitorDescriptorKind descriptorKind)
		{
			throw new global::System.NotImplementedException("The member byte[] DisplayMonitor.GetDescriptor(DisplayMonitorDescriptorKind descriptorKind) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%5B%5D%20DisplayMonitor.GetDescriptor%28DisplayMonitorDescriptorKind%20descriptorKind%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Display.DisplayMonitor.IsDolbyVisionSupportedInHdrMode.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector()
		{
			throw new global::System.NotImplementedException("The member string DisplayMonitor.GetDeviceSelector() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20DisplayMonitor.GetDeviceSelector%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Display.DisplayMonitor> FromIdAsync(string deviceId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<DisplayMonitor> DisplayMonitor.FromIdAsync(string deviceId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CDisplayMonitor%3E%20DisplayMonitor.FromIdAsync%28string%20deviceId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Display.DisplayMonitor> FromInterfaceIdAsync(string deviceInterfaceId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<DisplayMonitor> DisplayMonitor.FromInterfaceIdAsync(string deviceInterfaceId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CDisplayMonitor%3E%20DisplayMonitor.FromInterfaceIdAsync%28string%20deviceInterfaceId%29");
		}
#endif
	}
}
