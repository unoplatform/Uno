// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Graphics.Display.Core
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class HdmiDisplayMode
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal HdmiDisplayMode()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public ushort BitsPerPixel
		{
			get
			{
				throw new global::System.NotImplementedException("The member ushort HdmiDisplayMode.BitsPerPixel is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ushort%20HdmiDisplayMode.BitsPerPixel");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.Display.Core.HdmiDisplayColorSpace ColorSpace
		{
			get
			{
				throw new global::System.NotImplementedException("The member HdmiDisplayColorSpace HdmiDisplayMode.ColorSpace is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=HdmiDisplayColorSpace%20HdmiDisplayMode.ColorSpace");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Is2086MetadataSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool HdmiDisplayMode.Is2086MetadataSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HdmiDisplayMode.Is2086MetadataSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsSdrLuminanceSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool HdmiDisplayMode.IsSdrLuminanceSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HdmiDisplayMode.IsSdrLuminanceSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsSmpte2084Supported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool HdmiDisplayMode.IsSmpte2084Supported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HdmiDisplayMode.IsSmpte2084Supported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.Display.Core.HdmiDisplayPixelEncoding PixelEncoding
		{
			get
			{
				throw new global::System.NotImplementedException("The member HdmiDisplayPixelEncoding HdmiDisplayMode.PixelEncoding is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=HdmiDisplayPixelEncoding%20HdmiDisplayMode.PixelEncoding");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double RefreshRate
		{
			get
			{
				throw new global::System.NotImplementedException("The member double HdmiDisplayMode.RefreshRate is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20HdmiDisplayMode.RefreshRate");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint ResolutionHeightInRawPixels
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint HdmiDisplayMode.ResolutionHeightInRawPixels is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20HdmiDisplayMode.ResolutionHeightInRawPixels");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint ResolutionWidthInRawPixels
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint HdmiDisplayMode.ResolutionWidthInRawPixels is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20HdmiDisplayMode.ResolutionWidthInRawPixels");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool StereoEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool HdmiDisplayMode.StereoEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HdmiDisplayMode.StereoEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDolbyVisionLowLatencySupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool HdmiDisplayMode.IsDolbyVisionLowLatencySupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HdmiDisplayMode.IsDolbyVisionLowLatencySupported");
			}
		}
#endif
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.ResolutionWidthInRawPixels.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.ResolutionHeightInRawPixels.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.RefreshRate.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.StereoEnabled.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.BitsPerPixel.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsEqual(global::Windows.Graphics.Display.Core.HdmiDisplayMode mode)
		{
			throw new global::System.NotImplementedException("The member bool HdmiDisplayMode.IsEqual(HdmiDisplayMode mode) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HdmiDisplayMode.IsEqual%28HdmiDisplayMode%20mode%29");
		}
#endif
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.ColorSpace.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.PixelEncoding.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.IsSdrLuminanceSupported.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.IsSmpte2084Supported.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.Is2086MetadataSupported.get
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayMode.IsDolbyVisionLowLatencySupported.get
	}
}
