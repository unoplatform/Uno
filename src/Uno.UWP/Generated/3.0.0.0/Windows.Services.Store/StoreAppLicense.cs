// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Store
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class StoreAppLicense
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal StoreAppLicense()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.Services.Store.StoreLicense> AddOnLicenses
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyDictionary<string, StoreLicense> StoreAppLicense.AddOnLicenses is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyDictionary%3Cstring%2C%20StoreLicense%3E%20StoreAppLicense.AddOnLicenses");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.DateTimeOffset ExpirationDate
		{
			get
			{
				throw new global::System.NotImplementedException("The member DateTimeOffset StoreAppLicense.ExpirationDate is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DateTimeOffset%20StoreAppLicense.ExpirationDate");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string ExtendedJsonData
		{
			get
			{
				throw new global::System.NotImplementedException("The member string StoreAppLicense.ExtendedJsonData is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20StoreAppLicense.ExtendedJsonData");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsActive
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool StoreAppLicense.IsActive is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20StoreAppLicense.IsActive");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTrial
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool StoreAppLicense.IsTrial is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20StoreAppLicense.IsTrial");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTrialOwnedByThisUser
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool StoreAppLicense.IsTrialOwnedByThisUser is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20StoreAppLicense.IsTrialOwnedByThisUser");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string SkuStoreId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string StoreAppLicense.SkuStoreId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20StoreAppLicense.SkuStoreId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan TrialTimeRemaining
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan StoreAppLicense.TrialTimeRemaining is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20StoreAppLicense.TrialTimeRemaining");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string TrialUniqueId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string StoreAppLicense.TrialUniqueId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20StoreAppLicense.TrialUniqueId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDiscLicense
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool StoreAppLicense.IsDiscLicense is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20StoreAppLicense.IsDiscLicense");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.SkuStoreId.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.IsActive.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.IsTrial.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.ExpirationDate.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.ExtendedJsonData.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.AddOnLicenses.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.TrialTimeRemaining.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.IsTrialOwnedByThisUser.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.TrialUniqueId.get
		// Forced skipping of method Windows.Services.Store.StoreAppLicense.IsDiscLicense.get
	}
}
