// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Display.Core
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class DisplayState
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal DisplayState()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsReadOnly
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool DisplayState.IsReadOnly is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20DisplayState.IsReadOnly");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsStale
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool DisplayState.IsStale is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20DisplayState.IsStale");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IDictionary<global::System.Guid, object> Properties
		{
			get
			{
				throw new global::System.NotImplementedException("The member IDictionary<Guid, object> DisplayState.Properties is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IDictionary%3CGuid%2C%20object%3E%20DisplayState.Properties");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Display.Core.DisplayTarget> Targets
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<DisplayTarget> DisplayState.Targets is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CDisplayTarget%3E%20DisplayState.Targets");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Display.Core.DisplayView> Views
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<DisplayView> DisplayState.Views is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CDisplayView%3E%20DisplayState.Views");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Display.Core.DisplayState.IsReadOnly.get
		// Forced skipping of method Windows.Devices.Display.Core.DisplayState.IsStale.get
		// Forced skipping of method Windows.Devices.Display.Core.DisplayState.Targets.get
		// Forced skipping of method Windows.Devices.Display.Core.DisplayState.Views.get
		// Forced skipping of method Windows.Devices.Display.Core.DisplayState.Properties.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.Core.DisplayPath ConnectTarget(global::Windows.Devices.Display.Core.DisplayTarget target)
		{
			throw new global::System.NotImplementedException("The member DisplayPath DisplayState.ConnectTarget(DisplayTarget target) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayPath%20DisplayState.ConnectTarget%28DisplayTarget%20target%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.Core.DisplayPath ConnectTarget(global::Windows.Devices.Display.Core.DisplayTarget target, global::Windows.Devices.Display.Core.DisplayView view)
		{
			throw new global::System.NotImplementedException("The member DisplayPath DisplayState.ConnectTarget(DisplayTarget target, DisplayView view) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayPath%20DisplayState.ConnectTarget%28DisplayTarget%20target%2C%20DisplayView%20view%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanConnectTargetToView(global::Windows.Devices.Display.Core.DisplayTarget target, global::Windows.Devices.Display.Core.DisplayView view)
		{
			throw new global::System.NotImplementedException("The member bool DisplayState.CanConnectTargetToView(DisplayTarget target, DisplayView view) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20DisplayState.CanConnectTargetToView%28DisplayTarget%20target%2C%20DisplayView%20view%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.Core.DisplayView GetViewForTarget(global::Windows.Devices.Display.Core.DisplayTarget target)
		{
			throw new global::System.NotImplementedException("The member DisplayView DisplayState.GetViewForTarget(DisplayTarget target) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayView%20DisplayState.GetViewForTarget%28DisplayTarget%20target%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.Core.DisplayPath GetPathForTarget(global::Windows.Devices.Display.Core.DisplayTarget target)
		{
			throw new global::System.NotImplementedException("The member DisplayPath DisplayState.GetPathForTarget(DisplayTarget target) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayPath%20DisplayState.GetPathForTarget%28DisplayTarget%20target%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void DisconnectTarget(global::Windows.Devices.Display.Core.DisplayTarget target)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Display.Core.DisplayState", "void DisplayState.DisconnectTarget(DisplayTarget target)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.Core.DisplayStateOperationResult TryFunctionalize(global::Windows.Devices.Display.Core.DisplayStateFunctionalizeOptions options)
		{
			throw new global::System.NotImplementedException("The member DisplayStateOperationResult DisplayState.TryFunctionalize(DisplayStateFunctionalizeOptions options) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayStateOperationResult%20DisplayState.TryFunctionalize%28DisplayStateFunctionalizeOptions%20options%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.Core.DisplayStateOperationResult TryApply(global::Windows.Devices.Display.Core.DisplayStateApplyOptions options)
		{
			throw new global::System.NotImplementedException("The member DisplayStateOperationResult DisplayState.TryApply(DisplayStateApplyOptions options) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayStateOperationResult%20DisplayState.TryApply%28DisplayStateApplyOptions%20options%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Display.Core.DisplayState Clone()
		{
			throw new global::System.NotImplementedException("The member DisplayState DisplayState.Clone() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayState%20DisplayState.Clone%28%29");
		}
#endif
	}
}
