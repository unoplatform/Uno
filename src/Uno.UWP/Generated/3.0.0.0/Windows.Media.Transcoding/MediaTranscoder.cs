// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Transcoding
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class MediaTranscoder
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan TrimStopTime
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan MediaTranscoder.TrimStopTime is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20MediaTranscoder.TrimStopTime");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "TimeSpan MediaTranscoder.TrimStopTime");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan TrimStartTime
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan MediaTranscoder.TrimStartTime is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20MediaTranscoder.TrimStartTime");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "TimeSpan MediaTranscoder.TrimStartTime");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HardwareAccelerationEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MediaTranscoder.HardwareAccelerationEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MediaTranscoder.HardwareAccelerationEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "bool MediaTranscoder.HardwareAccelerationEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool AlwaysReencode
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MediaTranscoder.AlwaysReencode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MediaTranscoder.AlwaysReencode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "bool MediaTranscoder.AlwaysReencode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Transcoding.MediaVideoProcessingAlgorithm VideoProcessingAlgorithm
		{
			get
			{
				throw new global::System.NotImplementedException("The member MediaVideoProcessingAlgorithm MediaTranscoder.VideoProcessingAlgorithm is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MediaVideoProcessingAlgorithm%20MediaTranscoder.VideoProcessingAlgorithm");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "MediaVideoProcessingAlgorithm MediaTranscoder.VideoProcessingAlgorithm");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public MediaTranscoder()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "MediaTranscoder.MediaTranscoder()");
		}
#endif
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.MediaTranscoder()
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.TrimStartTime.set
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.TrimStartTime.get
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.TrimStopTime.set
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.TrimStopTime.get
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.AlwaysReencode.set
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.AlwaysReencode.get
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.HardwareAccelerationEnabled.set
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.HardwareAccelerationEnabled.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void AddAudioEffect(string activatableClassId)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "void MediaTranscoder.AddAudioEffect(string activatableClassId)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void AddAudioEffect(string activatableClassId, bool effectRequired, global::Windows.Foundation.Collections.IPropertySet configuration)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "void MediaTranscoder.AddAudioEffect(string activatableClassId, bool effectRequired, IPropertySet configuration)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void AddVideoEffect(string activatableClassId)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "void MediaTranscoder.AddVideoEffect(string activatableClassId)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void AddVideoEffect(string activatableClassId, bool effectRequired, global::Windows.Foundation.Collections.IPropertySet configuration)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "void MediaTranscoder.AddVideoEffect(string activatableClassId, bool effectRequired, IPropertySet configuration)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void ClearEffects()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Transcoding.MediaTranscoder", "void MediaTranscoder.ClearEffects()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Media.Transcoding.PrepareTranscodeResult> PrepareFileTranscodeAsync(global::Windows.Storage.IStorageFile source, global::Windows.Storage.IStorageFile destination, global::Windows.Media.MediaProperties.MediaEncodingProfile profile)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<PrepareTranscodeResult> MediaTranscoder.PrepareFileTranscodeAsync(IStorageFile source, IStorageFile destination, MediaEncodingProfile profile) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CPrepareTranscodeResult%3E%20MediaTranscoder.PrepareFileTranscodeAsync%28IStorageFile%20source%2C%20IStorageFile%20destination%2C%20MediaEncodingProfile%20profile%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Media.Transcoding.PrepareTranscodeResult> PrepareStreamTranscodeAsync(global::Windows.Storage.Streams.IRandomAccessStream source, global::Windows.Storage.Streams.IRandomAccessStream destination, global::Windows.Media.MediaProperties.MediaEncodingProfile profile)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<PrepareTranscodeResult> MediaTranscoder.PrepareStreamTranscodeAsync(IRandomAccessStream source, IRandomAccessStream destination, MediaEncodingProfile profile) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CPrepareTranscodeResult%3E%20MediaTranscoder.PrepareStreamTranscodeAsync%28IRandomAccessStream%20source%2C%20IRandomAccessStream%20destination%2C%20MediaEncodingProfile%20profile%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Media.Transcoding.PrepareTranscodeResult> PrepareMediaStreamSourceTranscodeAsync(global::Windows.Media.Core.IMediaSource source, global::Windows.Storage.Streams.IRandomAccessStream destination, global::Windows.Media.MediaProperties.MediaEncodingProfile profile)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<PrepareTranscodeResult> MediaTranscoder.PrepareMediaStreamSourceTranscodeAsync(IMediaSource source, IRandomAccessStream destination, MediaEncodingProfile profile) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CPrepareTranscodeResult%3E%20MediaTranscoder.PrepareMediaStreamSourceTranscodeAsync%28IMediaSource%20source%2C%20IRandomAccessStream%20destination%2C%20MediaEncodingProfile%20profile%29");
		}
#endif
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.VideoProcessingAlgorithm.set
		// Forced skipping of method Windows.Media.Transcoding.MediaTranscoder.VideoProcessingAlgorithm.get
	}
}
