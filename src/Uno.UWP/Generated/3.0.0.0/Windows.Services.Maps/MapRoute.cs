// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Maps
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class MapRoute
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal MapRoute()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Geolocation.GeoboundingBox BoundingBox
		{
			get
			{
				throw new global::System.NotImplementedException("The member GeoboundingBox MapRoute.BoundingBox is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GeoboundingBox%20MapRoute.BoundingBox");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan EstimatedDuration
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan MapRoute.EstimatedDuration is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20MapRoute.EstimatedDuration");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTrafficBased
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapRoute.IsTrafficBased is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapRoute.IsTrafficBased");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Services.Maps.MapRouteLeg> Legs
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<MapRouteLeg> MapRoute.Legs is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CMapRouteLeg%3E%20MapRoute.Legs");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double LengthInMeters
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapRoute.LengthInMeters is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapRoute.LengthInMeters");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Geolocation.Geopath Path
		{
			get
			{
				throw new global::System.NotImplementedException("The member Geopath MapRoute.Path is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Geopath%20MapRoute.Path");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasBlockedRoads
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapRoute.HasBlockedRoads is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapRoute.HasBlockedRoads");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.MapRouteRestrictions ViolatedRestrictions
		{
			get
			{
				throw new global::System.NotImplementedException("The member MapRouteRestrictions MapRoute.ViolatedRestrictions is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MapRouteRestrictions%20MapRoute.ViolatedRestrictions");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan DurationWithoutTraffic
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan MapRoute.DurationWithoutTraffic is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20MapRoute.DurationWithoutTraffic");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.TrafficCongestion TrafficCongestion
		{
			get
			{
				throw new global::System.NotImplementedException("The member TrafficCongestion MapRoute.TrafficCongestion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TrafficCongestion%20MapRoute.TrafficCongestion");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsScenic
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapRoute.IsScenic is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapRoute.IsScenic");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Maps.MapRoute.BoundingBox.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.LengthInMeters.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.EstimatedDuration.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.Path.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.Legs.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.IsTrafficBased.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.ViolatedRestrictions.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.HasBlockedRoads.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.DurationWithoutTraffic.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.TrafficCongestion.get
		// Forced skipping of method Windows.Services.Maps.MapRoute.IsScenic.get
	}
}
