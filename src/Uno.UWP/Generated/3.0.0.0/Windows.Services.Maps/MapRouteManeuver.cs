// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Maps
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class MapRouteManeuver
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal MapRouteManeuver()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string ExitNumber
		{
			get
			{
				throw new global::System.NotImplementedException("The member string MapRouteManeuver.ExitNumber is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20MapRouteManeuver.ExitNumber");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string InstructionText
		{
			get
			{
				throw new global::System.NotImplementedException("The member string MapRouteManeuver.InstructionText is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20MapRouteManeuver.InstructionText");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.MapRouteManeuverKind Kind
		{
			get
			{
				throw new global::System.NotImplementedException("The member MapRouteManeuverKind MapRouteManeuver.Kind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MapRouteManeuverKind%20MapRouteManeuver.Kind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double LengthInMeters
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapRouteManeuver.LengthInMeters is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapRouteManeuver.LengthInMeters");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.MapManeuverNotices ManeuverNotices
		{
			get
			{
				throw new global::System.NotImplementedException("The member MapManeuverNotices MapRouteManeuver.ManeuverNotices is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MapManeuverNotices%20MapRouteManeuver.ManeuverNotices");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Geolocation.Geopoint StartingPoint
		{
			get
			{
				throw new global::System.NotImplementedException("The member Geopoint MapRouteManeuver.StartingPoint is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Geopoint%20MapRouteManeuver.StartingPoint");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double EndHeading
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapRouteManeuver.EndHeading is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapRouteManeuver.EndHeading");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double StartHeading
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapRouteManeuver.StartHeading is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapRouteManeuver.StartHeading");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string StreetName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string MapRouteManeuver.StreetName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20MapRouteManeuver.StreetName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Services.Maps.ManeuverWarning> Warnings
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<ManeuverWarning> MapRouteManeuver.Warnings is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CManeuverWarning%3E%20MapRouteManeuver.Warnings");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.StartingPoint.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.LengthInMeters.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.InstructionText.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.Kind.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.ExitNumber.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.ManeuverNotices.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.StartHeading.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.EndHeading.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.StreetName.get
		// Forced skipping of method Windows.Services.Maps.MapRouteManeuver.Warnings.get
	}
}
