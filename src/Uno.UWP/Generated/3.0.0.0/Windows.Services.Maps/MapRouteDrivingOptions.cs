// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Maps
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class MapRouteDrivingOptions
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.MapRouteRestrictions RouteRestrictions
		{
			get
			{
				throw new global::System.NotImplementedException("The member MapRouteRestrictions MapRouteDrivingOptions.RouteRestrictions is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MapRouteRestrictions%20MapRouteDrivingOptions.RouteRestrictions");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.MapRouteDrivingOptions", "MapRouteRestrictions MapRouteDrivingOptions.RouteRestrictions");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.MapRouteOptimization RouteOptimization
		{
			get
			{
				throw new global::System.NotImplementedException("The member MapRouteOptimization MapRouteDrivingOptions.RouteOptimization is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MapRouteOptimization%20MapRouteDrivingOptions.RouteOptimization");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.MapRouteDrivingOptions", "MapRouteOptimization MapRouteDrivingOptions.RouteOptimization");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint MaxAlternateRouteCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint MapRouteDrivingOptions.MaxAlternateRouteCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20MapRouteDrivingOptions.MaxAlternateRouteCount");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.MapRouteDrivingOptions", "uint MapRouteDrivingOptions.MaxAlternateRouteCount");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double? InitialHeading
		{
			get
			{
				throw new global::System.NotImplementedException("The member double? MapRouteDrivingOptions.InitialHeading is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%3F%20MapRouteDrivingOptions.InitialHeading");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.MapRouteDrivingOptions", "double? MapRouteDrivingOptions.InitialHeading");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.DateTimeOffset? DepartureTime
		{
			get
			{
				throw new global::System.NotImplementedException("The member DateTimeOffset? MapRouteDrivingOptions.DepartureTime is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DateTimeOffset%3F%20MapRouteDrivingOptions.DepartureTime");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.MapRouteDrivingOptions", "DateTimeOffset? MapRouteDrivingOptions.DepartureTime");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public MapRouteDrivingOptions()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.MapRouteDrivingOptions", "MapRouteDrivingOptions.MapRouteDrivingOptions()");
		}
#endif
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.MapRouteDrivingOptions()
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.MaxAlternateRouteCount.get
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.MaxAlternateRouteCount.set
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.InitialHeading.get
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.InitialHeading.set
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.RouteOptimization.get
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.RouteOptimization.set
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.RouteRestrictions.get
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.RouteRestrictions.set
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.DepartureTime.get
		// Forced skipping of method Windows.Services.Maps.MapRouteDrivingOptions.DepartureTime.set
	}
}
