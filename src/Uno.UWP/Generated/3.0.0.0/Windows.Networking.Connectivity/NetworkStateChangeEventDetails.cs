// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Networking.Connectivity
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class NetworkStateChangeEventDetails
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal NetworkStateChangeEventDetails()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewConnectionCost
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewConnectionCost is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewConnectionCost");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewDomainConnectivityLevel
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewDomainConnectivityLevel is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewDomainConnectivityLevel");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewHostNameList
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewHostNameList is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewHostNameList");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewInternetConnectionProfile
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewInternetConnectionProfile is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewInternetConnectionProfile");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewNetworkConnectivityLevel
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewNetworkConnectivityLevel is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewNetworkConnectivityLevel");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewWwanRegistrationState
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewWwanRegistrationState is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewWwanRegistrationState");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewTetheringClientCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewTetheringClientCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewTetheringClientCount");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasNewTetheringOperationalState
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool NetworkStateChangeEventDetails.HasNewTetheringOperationalState is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20NetworkStateChangeEventDetails.HasNewTetheringOperationalState");
			}
		}
#endif
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewInternetConnectionProfile.get
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewConnectionCost.get
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewNetworkConnectivityLevel.get
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewDomainConnectivityLevel.get
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewHostNameList.get
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewWwanRegistrationState.get
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewTetheringOperationalState.get
		// Forced skipping of method Windows.Networking.Connectivity.NetworkStateChangeEventDetails.HasNewTetheringClientCount.get
	}
}
