// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Effects
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class VideoTransformSphericalProjection
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal VideoTransformSphericalProjection()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Numerics.Quaternion ViewOrientation
		{
			get
			{
				throw new global::System.NotImplementedException("The member Quaternion VideoTransformSphericalProjection.ViewOrientation is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Quaternion%20VideoTransformSphericalProjection.ViewOrientation");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Effects.VideoTransformSphericalProjection", "Quaternion VideoTransformSphericalProjection.ViewOrientation");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Playback.SphericalVideoProjectionMode ProjectionMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member SphericalVideoProjectionMode VideoTransformSphericalProjection.ProjectionMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SphericalVideoProjectionMode%20VideoTransformSphericalProjection.ProjectionMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Effects.VideoTransformSphericalProjection", "SphericalVideoProjectionMode VideoTransformSphericalProjection.ProjectionMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool VideoTransformSphericalProjection.IsEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20VideoTransformSphericalProjection.IsEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Effects.VideoTransformSphericalProjection", "bool VideoTransformSphericalProjection.IsEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double HorizontalFieldOfViewInDegrees
		{
			get
			{
				throw new global::System.NotImplementedException("The member double VideoTransformSphericalProjection.HorizontalFieldOfViewInDegrees is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20VideoTransformSphericalProjection.HorizontalFieldOfViewInDegrees");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Effects.VideoTransformSphericalProjection", "double VideoTransformSphericalProjection.HorizontalFieldOfViewInDegrees");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.MediaProperties.SphericalVideoFrameFormat FrameFormat
		{
			get
			{
				throw new global::System.NotImplementedException("The member SphericalVideoFrameFormat VideoTransformSphericalProjection.FrameFormat is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SphericalVideoFrameFormat%20VideoTransformSphericalProjection.FrameFormat");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Effects.VideoTransformSphericalProjection", "SphericalVideoFrameFormat VideoTransformSphericalProjection.FrameFormat");
			}
		}
#endif
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.IsEnabled.get
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.IsEnabled.set
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.FrameFormat.get
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.FrameFormat.set
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.ProjectionMode.get
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.ProjectionMode.set
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.HorizontalFieldOfViewInDegrees.get
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.HorizontalFieldOfViewInDegrees.set
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.ViewOrientation.get
		// Forced skipping of method Windows.Media.Effects.VideoTransformSphericalProjection.ViewOrientation.set
	}
}
