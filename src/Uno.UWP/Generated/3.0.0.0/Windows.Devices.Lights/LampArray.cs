// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Lights
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LampArray
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal LampArray()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LampArray.IsEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LampArray.IsEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "bool LampArray.IsEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double BrightnessLevel
		{
			get
			{
				throw new global::System.NotImplementedException("The member double LampArray.BrightnessLevel is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20LampArray.BrightnessLevel");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "double LampArray.BrightnessLevel");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Numerics.Vector3 BoundingBox
		{
			get
			{
				throw new global::System.NotImplementedException("The member Vector3 LampArray.BoundingBox is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Vector3%20LampArray.BoundingBox");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DeviceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string LampArray.DeviceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20LampArray.DeviceId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public ushort HardwareProductId
		{
			get
			{
				throw new global::System.NotImplementedException("The member ushort LampArray.HardwareProductId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ushort%20LampArray.HardwareProductId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public ushort HardwareVendorId
		{
			get
			{
				throw new global::System.NotImplementedException("The member ushort LampArray.HardwareVendorId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ushort%20LampArray.HardwareVendorId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public ushort HardwareVersion
		{
			get
			{
				throw new global::System.NotImplementedException("The member ushort LampArray.HardwareVersion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ushort%20LampArray.HardwareVersion");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsConnected
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LampArray.IsConnected is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LampArray.IsConnected");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Lights.LampArrayKind LampArrayKind
		{
			get
			{
				throw new global::System.NotImplementedException("The member LampArrayKind LampArray.LampArrayKind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LampArrayKind%20LampArray.LampArrayKind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int LampCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member int LampArray.LampCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20LampArray.LampCount");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan MinUpdateInterval
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan LampArray.MinUpdateInterval is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20LampArray.MinUpdateInterval");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool SupportsVirtualKeys
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LampArray.SupportsVirtualKeys is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LampArray.SupportsVirtualKeys");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Lights.LampArray.DeviceId.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.HardwareVendorId.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.HardwareProductId.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.HardwareVersion.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.LampArrayKind.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.LampCount.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.MinUpdateInterval.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.BoundingBox.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.IsEnabled.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.IsEnabled.set
		// Forced skipping of method Windows.Devices.Lights.LampArray.BrightnessLevel.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.BrightnessLevel.set
		// Forced skipping of method Windows.Devices.Lights.LampArray.IsConnected.get
		// Forced skipping of method Windows.Devices.Lights.LampArray.SupportsVirtualKeys.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Lights.LampInfo GetLampInfo(int lampIndex)
		{
			throw new global::System.NotImplementedException("The member LampInfo LampArray.GetLampInfo(int lampIndex) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LampInfo%20LampArray.GetLampInfo%28int%20lampIndex%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int[] GetIndicesForKey(global::Windows.System.VirtualKey key)
		{
			throw new global::System.NotImplementedException("The member int[] LampArray.GetIndicesForKey(VirtualKey key) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%5B%5D%20LampArray.GetIndicesForKey%28VirtualKey%20key%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int[] GetIndicesForPurposes(global::Windows.Devices.Lights.LampPurposes purposes)
		{
			throw new global::System.NotImplementedException("The member int[] LampArray.GetIndicesForPurposes(LampPurposes purposes) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%5B%5D%20LampArray.GetIndicesForPurposes%28LampPurposes%20purposes%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetColor(global::Windows.UI.Color desiredColor)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "void LampArray.SetColor(Color desiredColor)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetColorForIndex(int lampIndex, global::Windows.UI.Color desiredColor)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "void LampArray.SetColorForIndex(int lampIndex, Color desiredColor)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetSingleColorForIndices(global::Windows.UI.Color desiredColor, int[] lampIndexes)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "void LampArray.SetSingleColorForIndices(Color desiredColor, int[] lampIndexes)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetColorsForIndices(global::Windows.UI.Color[] desiredColors, int[] lampIndexes)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "void LampArray.SetColorsForIndices(Color[] desiredColors, int[] lampIndexes)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetColorsForKey(global::Windows.UI.Color desiredColor, global::Windows.System.VirtualKey key)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "void LampArray.SetColorsForKey(Color desiredColor, VirtualKey key)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetColorsForKeys(global::Windows.UI.Color[] desiredColors, global::Windows.System.VirtualKey[] keys)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "void LampArray.SetColorsForKeys(Color[] desiredColors, VirtualKey[] keys)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetColorsForPurposes(global::Windows.UI.Color desiredColor, global::Windows.Devices.Lights.LampPurposes purposes)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Lights.LampArray", "void LampArray.SetColorsForPurposes(Color desiredColor, LampPurposes purposes)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncAction SendMessageAsync(int messageId, global::Windows.Storage.Streams.IBuffer message)
		{
			throw new global::System.NotImplementedException("The member IAsyncAction LampArray.SendMessageAsync(int messageId, IBuffer message) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncAction%20LampArray.SendMessageAsync%28int%20messageId%2C%20IBuffer%20message%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IBuffer> RequestMessageAsync(int messageId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IBuffer> LampArray.RequestMessageAsync(int messageId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIBuffer%3E%20LampArray.RequestMessageAsync%28int%20messageId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector()
		{
			throw new global::System.NotImplementedException("The member string LampArray.GetDeviceSelector() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20LampArray.GetDeviceSelector%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Lights.LampArray> FromIdAsync(string deviceId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LampArray> LampArray.FromIdAsync(string deviceId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLampArray%3E%20LampArray.FromIdAsync%28string%20deviceId%29");
		}
#endif
	}
}
