// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.SpeechRecognition
{
#if false || false || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented("IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
#endif
	public partial class SpeechRecognitionResult
	{
#if false || false || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal SpeechRecognitionResult()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.SpeechRecognition.SpeechRecognitionConfidence Confidence
		{
			get
			{
				throw new global::System.NotImplementedException("The member SpeechRecognitionConfidence SpeechRecognitionResult.Confidence is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpeechRecognitionConfidence%20SpeechRecognitionResult.Confidence");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint Constraint
		{
			get
			{
				throw new global::System.NotImplementedException("The member ISpeechRecognitionConstraint SpeechRecognitionResult.Constraint is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ISpeechRecognitionConstraint%20SpeechRecognitionResult.Constraint");
			}
		}
#endif
#if false || false || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double RawConfidence
		{
			get
			{
				throw new global::System.NotImplementedException("The member double SpeechRecognitionResult.RawConfidence is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20SpeechRecognitionResult.RawConfidence");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<string> RulePath
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<string> SpeechRecognitionResult.RulePath is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cstring%3E%20SpeechRecognitionResult.RulePath");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.SpeechRecognition.SpeechRecognitionSemanticInterpretation SemanticInterpretation
		{
			get
			{
				throw new global::System.NotImplementedException("The member SpeechRecognitionSemanticInterpretation SpeechRecognitionResult.SemanticInterpretation is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpeechRecognitionSemanticInterpretation%20SpeechRecognitionResult.SemanticInterpretation");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus Status
		{
			get
			{
				throw new global::System.NotImplementedException("The member SpeechRecognitionResultStatus SpeechRecognitionResult.Status is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpeechRecognitionResultStatus%20SpeechRecognitionResult.Status");
			}
		}
#endif
#if false || false || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Text
		{
			get
			{
				throw new global::System.NotImplementedException("The member string SpeechRecognitionResult.Text is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20SpeechRecognitionResult.Text");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan PhraseDuration
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan SpeechRecognitionResult.PhraseDuration is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20SpeechRecognitionResult.PhraseDuration");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.DateTimeOffset PhraseStartTime
		{
			get
			{
				throw new global::System.NotImplementedException("The member DateTimeOffset SpeechRecognitionResult.PhraseStartTime is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DateTimeOffset%20SpeechRecognitionResult.PhraseStartTime");
			}
		}
#endif
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.Status.get
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.Text.get
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.Confidence.get
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.SemanticInterpretation.get
#if false || false || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Media.SpeechRecognition.SpeechRecognitionResult> GetAlternates(uint maxAlternates)
		{
			throw new global::System.NotImplementedException("The member IReadOnlyList<SpeechRecognitionResult> SpeechRecognitionResult.GetAlternates(uint maxAlternates) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CSpeechRecognitionResult%3E%20SpeechRecognitionResult.GetAlternates%28uint%20maxAlternates%29");
		}
#endif
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.Constraint.get
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.RulePath.get
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.RawConfidence.get
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.PhraseStartTime.get
		// Forced skipping of method Windows.Media.SpeechRecognition.SpeechRecognitionResult.PhraseDuration.get
	}
}
