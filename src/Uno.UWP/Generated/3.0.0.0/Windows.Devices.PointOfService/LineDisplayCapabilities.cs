// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.PointOfService
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LineDisplayCapabilities
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal LineDisplayCapabilities()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity CanBlink
		{
			get
			{
				throw new global::System.NotImplementedException("The member LineDisplayTextAttributeGranularity LineDisplayCapabilities.CanBlink is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LineDisplayTextAttributeGranularity%20LineDisplayCapabilities.CanBlink");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanChangeBlinkRate
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.CanChangeBlinkRate is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.CanChangeBlinkRate");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanChangeScreenSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.CanChangeScreenSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.CanChangeScreenSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanDisplayBitmaps
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.CanDisplayBitmaps is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.CanDisplayBitmaps");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanDisplayCustomGlyphs
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.CanDisplayCustomGlyphs is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.CanDisplayCustomGlyphs");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanMapCharacterSets
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.CanMapCharacterSets is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.CanMapCharacterSets");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanReadCharacterAtCursor
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.CanReadCharacterAtCursor is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.CanReadCharacterAtCursor");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity CanReverse
		{
			get
			{
				throw new global::System.NotImplementedException("The member LineDisplayTextAttributeGranularity LineDisplayCapabilities.CanReverse is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LineDisplayTextAttributeGranularity%20LineDisplayCapabilities.CanReverse");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsBrightnessSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.IsBrightnessSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.IsBrightnessSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsCursorSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.IsCursorSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.IsCursorSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsHorizontalMarqueeSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.IsHorizontalMarqueeSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.IsHorizontalMarqueeSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsInterCharacterWaitSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.IsInterCharacterWaitSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.IsInterCharacterWaitSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsStatisticsReportingSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.IsStatisticsReportingSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.IsStatisticsReportingSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsStatisticsUpdatingSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.IsStatisticsUpdatingSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.IsStatisticsUpdatingSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsVerticalMarqueeSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LineDisplayCapabilities.IsVerticalMarqueeSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LineDisplayCapabilities.IsVerticalMarqueeSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.UnifiedPosPowerReportingType PowerReportingType
		{
			get
			{
				throw new global::System.NotImplementedException("The member UnifiedPosPowerReportingType LineDisplayCapabilities.PowerReportingType is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=UnifiedPosPowerReportingType%20LineDisplayCapabilities.PowerReportingType");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint SupportedDescriptors
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint LineDisplayCapabilities.SupportedDescriptors is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20LineDisplayCapabilities.SupportedDescriptors");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint SupportedWindows
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint LineDisplayCapabilities.SupportedWindows is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20LineDisplayCapabilities.SupportedWindows");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.IsStatisticsReportingSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.IsStatisticsUpdatingSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.PowerReportingType.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanChangeScreenSize.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanDisplayBitmaps.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanReadCharacterAtCursor.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanMapCharacterSets.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanDisplayCustomGlyphs.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanReverse.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanBlink.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.CanChangeBlinkRate.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.IsBrightnessSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.IsCursorSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.IsHorizontalMarqueeSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.IsVerticalMarqueeSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.IsInterCharacterWaitSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.SupportedDescriptors.get
		// Forced skipping of method Windows.Devices.PointOfService.LineDisplayCapabilities.SupportedWindows.get
	}
}
