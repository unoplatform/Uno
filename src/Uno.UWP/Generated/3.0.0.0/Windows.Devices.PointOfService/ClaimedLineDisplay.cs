// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.PointOfService
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class ClaimedLineDisplay : global::System.IDisposable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal ClaimedLineDisplay()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.LineDisplayCapabilities Capabilities
		{
			get
			{
				throw new global::System.NotImplementedException("The member LineDisplayCapabilities ClaimedLineDisplay.Capabilities is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LineDisplayCapabilities%20ClaimedLineDisplay.Capabilities");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.LineDisplayWindow DefaultWindow
		{
			get
			{
				throw new global::System.NotImplementedException("The member LineDisplayWindow ClaimedLineDisplay.DefaultWindow is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LineDisplayWindow%20ClaimedLineDisplay.DefaultWindow");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DeviceControlDescription
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.DeviceControlDescription is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.DeviceControlDescription");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DeviceControlVersion
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.DeviceControlVersion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.DeviceControlVersion");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DeviceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.DeviceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.DeviceId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DeviceServiceVersion
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.DeviceServiceVersion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.DeviceServiceVersion");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string PhysicalDeviceDescription
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.PhysicalDeviceDescription is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.PhysicalDeviceDescription");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string PhysicalDeviceName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.PhysicalDeviceName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.PhysicalDeviceName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.LineDisplayCustomGlyphs CustomGlyphs
		{
			get
			{
				throw new global::System.NotImplementedException("The member LineDisplayCustomGlyphs ClaimedLineDisplay.CustomGlyphs is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LineDisplayCustomGlyphs%20ClaimedLineDisplay.CustomGlyphs");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size MaxBitmapSizeInPixels
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ClaimedLineDisplay.MaxBitmapSizeInPixels is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ClaimedLineDisplay.MaxBitmapSizeInPixels");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<int> SupportedCharacterSets
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<int> ClaimedLineDisplay.SupportedCharacterSets is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cint%3E%20ClaimedLineDisplay.SupportedCharacterSets");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Foundation.Size> SupportedScreenSizesInCharacters
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<Size> ClaimedLineDisplay.SupportedScreenSizesInCharacters is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CSize%3E%20ClaimedLineDisplay.SupportedScreenSizesInCharacters");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.DeviceId.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.Capabilities.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.PhysicalDeviceName.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.PhysicalDeviceDescription.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.DeviceControlDescription.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.DeviceControlVersion.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.DeviceServiceVersion.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.DefaultWindow.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void RetainDevice()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "void ClaimedLineDisplay.RetainDevice()");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.ReleaseDeviceRequested.add
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.ReleaseDeviceRequested.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<string> GetStatisticsAsync(global::System.Collections.Generic.IEnumerable<string> statisticsCategories)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<string> ClaimedLineDisplay.GetStatisticsAsync(IEnumerable<string> statisticsCategories) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Cstring%3E%20ClaimedLineDisplay.GetStatisticsAsync%28IEnumerable%3Cstring%3E%20statisticsCategories%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<string> CheckHealthAsync(global::Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel level)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<string> ClaimedLineDisplay.CheckHealthAsync(UnifiedPosHealthCheckLevel level) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Cstring%3E%20ClaimedLineDisplay.CheckHealthAsync%28UnifiedPosHealthCheckLevel%20level%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.PointOfService.LineDisplayPowerStatus> CheckPowerStatusAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LineDisplayPowerStatus> ClaimedLineDisplay.CheckPowerStatusAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLineDisplayPowerStatus%3E%20ClaimedLineDisplay.CheckPowerStatusAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.StatusUpdated.add
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.StatusUpdated.remove
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.SupportedScreenSizesInCharacters.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.MaxBitmapSizeInPixels.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.SupportedCharacterSets.get
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.CustomGlyphs.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.LineDisplayAttributes GetAttributes()
		{
			throw new global::System.NotImplementedException("The member LineDisplayAttributes ClaimedLineDisplay.GetAttributes() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LineDisplayAttributes%20ClaimedLineDisplay.GetAttributes%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<bool> TryUpdateAttributesAsync(global::Windows.Devices.PointOfService.LineDisplayAttributes attributes)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<bool> ClaimedLineDisplay.TryUpdateAttributesAsync(LineDisplayAttributes attributes) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Cbool%3E%20ClaimedLineDisplay.TryUpdateAttributesAsync%28LineDisplayAttributes%20attributes%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<bool> TrySetDescriptorAsync(uint descriptor, global::Windows.Devices.PointOfService.LineDisplayDescriptorState descriptorState)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<bool> ClaimedLineDisplay.TrySetDescriptorAsync(uint descriptor, LineDisplayDescriptorState descriptorState) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Cbool%3E%20ClaimedLineDisplay.TrySetDescriptorAsync%28uint%20descriptor%2C%20LineDisplayDescriptorState%20descriptorState%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<bool> TryClearDescriptorsAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<bool> ClaimedLineDisplay.TryClearDescriptorsAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Cbool%3E%20ClaimedLineDisplay.TryClearDescriptorsAsync%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.PointOfService.LineDisplayWindow> TryCreateWindowAsync(global::Windows.Foundation.Rect viewport, global::Windows.Foundation.Size windowSize)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LineDisplayWindow> ClaimedLineDisplay.TryCreateWindowAsync(Rect viewport, Size windowSize) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLineDisplayWindow%3E%20ClaimedLineDisplay.TryCreateWindowAsync%28Rect%20viewport%2C%20Size%20windowSize%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.PointOfService.LineDisplayStoredBitmap> TryStoreStorageFileBitmapAsync(global::Windows.Storage.StorageFile bitmap)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LineDisplayStoredBitmap> ClaimedLineDisplay.TryStoreStorageFileBitmapAsync(StorageFile bitmap) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLineDisplayStoredBitmap%3E%20ClaimedLineDisplay.TryStoreStorageFileBitmapAsync%28StorageFile%20bitmap%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.PointOfService.LineDisplayStoredBitmap> TryStoreStorageFileBitmapAsync(global::Windows.Storage.StorageFile bitmap, global::Windows.Devices.PointOfService.LineDisplayHorizontalAlignment horizontalAlignment, global::Windows.Devices.PointOfService.LineDisplayVerticalAlignment verticalAlignment)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LineDisplayStoredBitmap> ClaimedLineDisplay.TryStoreStorageFileBitmapAsync(StorageFile bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLineDisplayStoredBitmap%3E%20ClaimedLineDisplay.TryStoreStorageFileBitmapAsync%28StorageFile%20bitmap%2C%20LineDisplayHorizontalAlignment%20horizontalAlignment%2C%20LineDisplayVerticalAlignment%20verticalAlignment%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.PointOfService.LineDisplayStoredBitmap> TryStoreStorageFileBitmapAsync(global::Windows.Storage.StorageFile bitmap, global::Windows.Devices.PointOfService.LineDisplayHorizontalAlignment horizontalAlignment, global::Windows.Devices.PointOfService.LineDisplayVerticalAlignment verticalAlignment, int widthInPixels)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LineDisplayStoredBitmap> ClaimedLineDisplay.TryStoreStorageFileBitmapAsync(StorageFile bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment, int widthInPixels) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLineDisplayStoredBitmap%3E%20ClaimedLineDisplay.TryStoreStorageFileBitmapAsync%28StorageFile%20bitmap%2C%20LineDisplayHorizontalAlignment%20horizontalAlignment%2C%20LineDisplayVerticalAlignment%20verticalAlignment%2C%20int%20widthInPixels%29");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.Closed.add
		// Forced skipping of method Windows.Devices.PointOfService.ClaimedLineDisplay.Closed.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dispose()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "void ClaimedLineDisplay.Dispose()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.PointOfService.ClaimedLineDisplay> FromIdAsync(string deviceId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<ClaimedLineDisplay> ClaimedLineDisplay.FromIdAsync(string deviceId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CClaimedLineDisplay%3E%20ClaimedLineDisplay.FromIdAsync%28string%20deviceId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector()
		{
			throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.GetDeviceSelector() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.GetDeviceSelector%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector(global::Windows.Devices.PointOfService.PosConnectionTypes connectionTypes)
		{
			throw new global::System.NotImplementedException("The member string ClaimedLineDisplay.GetDeviceSelector(PosConnectionTypes connectionTypes) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ClaimedLineDisplay.GetDeviceSelector%28PosConnectionTypes%20connectionTypes%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedLineDisplay, object> ReleaseDeviceRequested
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "event TypedEventHandler<ClaimedLineDisplay, object> ClaimedLineDisplay.ReleaseDeviceRequested");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "event TypedEventHandler<ClaimedLineDisplay, object> ClaimedLineDisplay.ReleaseDeviceRequested");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedLineDisplay, global::Windows.Devices.PointOfService.LineDisplayStatusUpdatedEventArgs> StatusUpdated
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "event TypedEventHandler<ClaimedLineDisplay, LineDisplayStatusUpdatedEventArgs> ClaimedLineDisplay.StatusUpdated");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "event TypedEventHandler<ClaimedLineDisplay, LineDisplayStatusUpdatedEventArgs> ClaimedLineDisplay.StatusUpdated");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.PointOfService.ClaimedLineDisplay, global::Windows.Devices.PointOfService.ClaimedLineDisplayClosedEventArgs> Closed
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "event TypedEventHandler<ClaimedLineDisplay, ClaimedLineDisplayClosedEventArgs> ClaimedLineDisplay.Closed");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.ClaimedLineDisplay", "event TypedEventHandler<ClaimedLineDisplay, ClaimedLineDisplayClosedEventArgs> ClaimedLineDisplay.Closed");
			}
		}
#endif
		// Processing: System.IDisposable
	}
}
