// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Core
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class CodecInfo
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal CodecInfo()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Core.CodecCategory Category
		{
			get
			{
				throw new global::System.NotImplementedException("The member CodecCategory CodecInfo.Category is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=CodecCategory%20CodecInfo.Category");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DisplayName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string CodecInfo.DisplayName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20CodecInfo.DisplayName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTrusted
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool CodecInfo.IsTrusted is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20CodecInfo.IsTrusted");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Core.CodecKind Kind
		{
			get
			{
				throw new global::System.NotImplementedException("The member CodecKind CodecInfo.Kind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=CodecKind%20CodecInfo.Kind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<string> Subtypes
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<string> CodecInfo.Subtypes is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cstring%3E%20CodecInfo.Subtypes");
			}
		}
#endif
		// Forced skipping of method Windows.Media.Core.CodecInfo.Kind.get
		// Forced skipping of method Windows.Media.Core.CodecInfo.Category.get
		// Forced skipping of method Windows.Media.Core.CodecInfo.Subtypes.get
		// Forced skipping of method Windows.Media.Core.CodecInfo.DisplayName.get
		// Forced skipping of method Windows.Media.Core.CodecInfo.IsTrusted.get
	}
}
