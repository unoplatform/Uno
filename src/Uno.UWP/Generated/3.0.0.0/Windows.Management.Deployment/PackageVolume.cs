// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Management.Deployment
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class PackageVolume
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal PackageVolume()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsOffline
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PackageVolume.IsOffline is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PackageVolume.IsOffline");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsSystemVolume
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PackageVolume.IsSystemVolume is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PackageVolume.IsSystemVolume");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string MountPoint
		{
			get
			{
				throw new global::System.NotImplementedException("The member string PackageVolume.MountPoint is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20PackageVolume.MountPoint");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Name
		{
			get
			{
				throw new global::System.NotImplementedException("The member string PackageVolume.Name is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20PackageVolume.Name");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string PackageStorePath
		{
			get
			{
				throw new global::System.NotImplementedException("The member string PackageVolume.PackageStorePath is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20PackageVolume.PackageStorePath");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool SupportsHardLinks
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PackageVolume.SupportsHardLinks is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PackageVolume.SupportsHardLinks");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsAppxInstallSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PackageVolume.IsAppxInstallSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PackageVolume.IsAppxInstallSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsFullTrustPackageSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PackageVolume.IsFullTrustPackageSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PackageVolume.IsFullTrustPackageSupported");
			}
		}
#endif
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.IsOffline.get
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.IsSystemVolume.get
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.MountPoint.get
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.Name.get
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.PackageStorePath.get
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.SupportsHardLinks.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackages()
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackages() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackages%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackages(string packageName, string packagePublisher)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackages(string packageName, string packagePublisher) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackages%28string%20packageName%2C%20string%20packagePublisher%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackages(string packageFamilyName)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackages(string packageFamilyName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackages%28string%20packageFamilyName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesWithPackageTypes(global::Windows.Management.Deployment.PackageTypes packageTypes)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesWithPackageTypes(PackageTypes packageTypes) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesWithPackageTypes%28PackageTypes%20packageTypes%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesWithPackageTypes(global::Windows.Management.Deployment.PackageTypes packageTypes, string packageName, string packagePublisher)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesWithPackageTypes(PackageTypes packageTypes, string packageName, string packagePublisher) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesWithPackageTypes%28PackageTypes%20packageTypes%2C%20string%20packageName%2C%20string%20packagePublisher%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesWithPackageTypes(global::Windows.Management.Deployment.PackageTypes packageTypes, string packageFamilyName)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesWithPackageTypes(PackageTypes packageTypes, string packageFamilyName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesWithPackageTypes%28PackageTypes%20packageTypes%2C%20string%20packageFamilyName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackage(string packageFullName)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackage(string packageFullName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackage%28string%20packageFullName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesForUser(string userSecurityId)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesForUser(string userSecurityId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesForUser%28string%20userSecurityId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesForUser(string userSecurityId, string packageName, string packagePublisher)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesForUser(string userSecurityId, string packageName, string packagePublisher) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesForUser%28string%20userSecurityId%2C%20string%20packageName%2C%20string%20packagePublisher%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesForUser(string userSecurityId, string packageFamilyName)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesForUser(string userSecurityId, string packageFamilyName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesForUser%28string%20userSecurityId%2C%20string%20packageFamilyName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesForUserWithPackageTypes(string userSecurityId, global::Windows.Management.Deployment.PackageTypes packageTypes)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesForUserWithPackageTypes(string userSecurityId, PackageTypes packageTypes) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesForUserWithPackageTypes%28string%20userSecurityId%2C%20PackageTypes%20packageTypes%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesForUserWithPackageTypes(string userSecurityId, global::Windows.Management.Deployment.PackageTypes packageTypes, string packageName, string packagePublisher)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesForUserWithPackageTypes(string userSecurityId, PackageTypes packageTypes, string packageName, string packagePublisher) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesForUserWithPackageTypes%28string%20userSecurityId%2C%20PackageTypes%20packageTypes%2C%20string%20packageName%2C%20string%20packagePublisher%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackagesForUserWithPackageTypes(string userSecurityId, global::Windows.Management.Deployment.PackageTypes packageTypes, string packageFamilyName)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackagesForUserWithPackageTypes(string userSecurityId, PackageTypes packageTypes, string packageFamilyName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackagesForUserWithPackageTypes%28string%20userSecurityId%2C%20PackageTypes%20packageTypes%2C%20string%20packageFamilyName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.ApplicationModel.Package> FindPackageForUser(string userSecurityId, string packageFullName)
		{
			throw new global::System.NotImplementedException("The member IList<Package> PackageVolume.FindPackageForUser(string userSecurityId, string packageFullName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CPackage%3E%20PackageVolume.FindPackageForUser%28string%20userSecurityId%2C%20string%20packageFullName%29");
		}
#endif
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.IsFullTrustPackageSupported.get
		// Forced skipping of method Windows.Management.Deployment.PackageVolume.IsAppxInstallSupported.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<ulong> GetAvailableSpaceAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<ulong> PackageVolume.GetAvailableSpaceAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Culong%3E%20PackageVolume.GetAvailableSpaceAsync%28%29");
		}
#endif
	}
}
