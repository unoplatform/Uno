// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Devices
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class DigitalWindowCapability
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal DigitalWindowCapability()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Height
		{
			get
			{
				throw new global::System.NotImplementedException("The member int DigitalWindowCapability.Height is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20DigitalWindowCapability.Height");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MaxScaleValue
		{
			get
			{
				throw new global::System.NotImplementedException("The member double DigitalWindowCapability.MaxScaleValue is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20DigitalWindowCapability.MaxScaleValue");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MinScaleValue
		{
			get
			{
				throw new global::System.NotImplementedException("The member double DigitalWindowCapability.MinScaleValue is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20DigitalWindowCapability.MinScaleValue");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MinScaleValueWithoutUpsampling
		{
			get
			{
				throw new global::System.NotImplementedException("The member double DigitalWindowCapability.MinScaleValueWithoutUpsampling is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20DigitalWindowCapability.MinScaleValueWithoutUpsampling");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Rect NormalizedFieldOfViewLimit
		{
			get
			{
				throw new global::System.NotImplementedException("The member Rect DigitalWindowCapability.NormalizedFieldOfViewLimit is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20DigitalWindowCapability.NormalizedFieldOfViewLimit");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Width
		{
			get
			{
				throw new global::System.NotImplementedException("The member int DigitalWindowCapability.Width is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20DigitalWindowCapability.Width");
			}
		}
#endif
		// Forced skipping of method Windows.Media.Devices.DigitalWindowCapability.Width.get
		// Forced skipping of method Windows.Media.Devices.DigitalWindowCapability.Height.get
		// Forced skipping of method Windows.Media.Devices.DigitalWindowCapability.MinScaleValue.get
		// Forced skipping of method Windows.Media.Devices.DigitalWindowCapability.MaxScaleValue.get
		// Forced skipping of method Windows.Media.Devices.DigitalWindowCapability.MinScaleValueWithoutUpsampling.get
		// Forced skipping of method Windows.Media.Devices.DigitalWindowCapability.NormalizedFieldOfViewLimit.get
	}
}
