// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Devices
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LowLagPhotoSequenceControl
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal LowLagPhotoSequenceControl()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.MediaProperties.MediaThumbnailFormat ThumbnailFormat
		{
			get
			{
				throw new global::System.NotImplementedException("The member MediaThumbnailFormat LowLagPhotoSequenceControl.ThumbnailFormat is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MediaThumbnailFormat%20LowLagPhotoSequenceControl.ThumbnailFormat");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.LowLagPhotoSequenceControl", "MediaThumbnailFormat LowLagPhotoSequenceControl.ThumbnailFormat");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool ThumbnailEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LowLagPhotoSequenceControl.ThumbnailEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LowLagPhotoSequenceControl.ThumbnailEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.LowLagPhotoSequenceControl", "bool LowLagPhotoSequenceControl.ThumbnailEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float PhotosPerSecondLimit
		{
			get
			{
				throw new global::System.NotImplementedException("The member float LowLagPhotoSequenceControl.PhotosPerSecondLimit is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20LowLagPhotoSequenceControl.PhotosPerSecondLimit");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.LowLagPhotoSequenceControl", "float LowLagPhotoSequenceControl.PhotosPerSecondLimit");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint PastPhotoLimit
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint LowLagPhotoSequenceControl.PastPhotoLimit is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20LowLagPhotoSequenceControl.PastPhotoLimit");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.LowLagPhotoSequenceControl", "uint LowLagPhotoSequenceControl.PastPhotoLimit");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint DesiredThumbnailSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint LowLagPhotoSequenceControl.DesiredThumbnailSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20LowLagPhotoSequenceControl.DesiredThumbnailSize");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.LowLagPhotoSequenceControl", "uint LowLagPhotoSequenceControl.DesiredThumbnailSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint HardwareAcceleratedThumbnailSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint LowLagPhotoSequenceControl.HardwareAcceleratedThumbnailSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20LowLagPhotoSequenceControl.HardwareAcceleratedThumbnailSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint MaxPastPhotos
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint LowLagPhotoSequenceControl.MaxPastPhotos is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20LowLagPhotoSequenceControl.MaxPastPhotos");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float MaxPhotosPerSecond
		{
			get
			{
				throw new global::System.NotImplementedException("The member float LowLagPhotoSequenceControl.MaxPhotosPerSecond is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20LowLagPhotoSequenceControl.MaxPhotosPerSecond");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Supported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LowLagPhotoSequenceControl.Supported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LowLagPhotoSequenceControl.Supported");
			}
		}
#endif
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.Supported.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.MaxPastPhotos.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.MaxPhotosPerSecond.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.PastPhotoLimit.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.PastPhotoLimit.set
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.PhotosPerSecondLimit.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.PhotosPerSecondLimit.set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.MediaProperties.MediaRatio GetHighestConcurrentFrameRate(global::Windows.Media.MediaProperties.IMediaEncodingProperties captureProperties)
		{
			throw new global::System.NotImplementedException("The member MediaRatio LowLagPhotoSequenceControl.GetHighestConcurrentFrameRate(IMediaEncodingProperties captureProperties) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MediaRatio%20LowLagPhotoSequenceControl.GetHighestConcurrentFrameRate%28IMediaEncodingProperties%20captureProperties%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.MediaProperties.MediaRatio GetCurrentFrameRate()
		{
			throw new global::System.NotImplementedException("The member MediaRatio LowLagPhotoSequenceControl.GetCurrentFrameRate() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MediaRatio%20LowLagPhotoSequenceControl.GetCurrentFrameRate%28%29");
		}
#endif
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.ThumbnailEnabled.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.ThumbnailEnabled.set
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.ThumbnailFormat.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.ThumbnailFormat.set
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.DesiredThumbnailSize.get
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.DesiredThumbnailSize.set
		// Forced skipping of method Windows.Media.Devices.LowLagPhotoSequenceControl.HardwareAcceleratedThumbnailSupported.get
	}
}
