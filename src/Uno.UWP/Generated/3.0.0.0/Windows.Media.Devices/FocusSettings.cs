// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Devices
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class FocusSettings
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool WaitForFocus
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool FocusSettings.WaitForFocus is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20FocusSettings.WaitForFocus");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.FocusSettings", "bool FocusSettings.WaitForFocus");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint? Value
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint? FocusSettings.Value is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%3F%20FocusSettings.Value");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.FocusSettings", "uint? FocusSettings.Value");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Devices.FocusMode Mode
		{
			get
			{
				throw new global::System.NotImplementedException("The member FocusMode FocusSettings.Mode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=FocusMode%20FocusSettings.Mode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.FocusSettings", "FocusMode FocusSettings.Mode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Devices.ManualFocusDistance? Distance
		{
			get
			{
				throw new global::System.NotImplementedException("The member ManualFocusDistance? FocusSettings.Distance is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ManualFocusDistance%3F%20FocusSettings.Distance");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.FocusSettings", "ManualFocusDistance? FocusSettings.Distance");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool DisableDriverFallback
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool FocusSettings.DisableDriverFallback is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20FocusSettings.DisableDriverFallback");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.FocusSettings", "bool FocusSettings.DisableDriverFallback");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Devices.AutoFocusRange AutoFocusRange
		{
			get
			{
				throw new global::System.NotImplementedException("The member AutoFocusRange FocusSettings.AutoFocusRange is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AutoFocusRange%20FocusSettings.AutoFocusRange");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.FocusSettings", "AutoFocusRange FocusSettings.AutoFocusRange");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public FocusSettings()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Devices.FocusSettings", "FocusSettings.FocusSettings()");
		}
#endif
		// Forced skipping of method Windows.Media.Devices.FocusSettings.FocusSettings()
		// Forced skipping of method Windows.Media.Devices.FocusSettings.Mode.get
		// Forced skipping of method Windows.Media.Devices.FocusSettings.Mode.set
		// Forced skipping of method Windows.Media.Devices.FocusSettings.AutoFocusRange.get
		// Forced skipping of method Windows.Media.Devices.FocusSettings.AutoFocusRange.set
		// Forced skipping of method Windows.Media.Devices.FocusSettings.Value.get
		// Forced skipping of method Windows.Media.Devices.FocusSettings.Value.set
		// Forced skipping of method Windows.Media.Devices.FocusSettings.Distance.get
		// Forced skipping of method Windows.Media.Devices.FocusSettings.Distance.set
		// Forced skipping of method Windows.Media.Devices.FocusSettings.WaitForFocus.get
		// Forced skipping of method Windows.Media.Devices.FocusSettings.WaitForFocus.set
		// Forced skipping of method Windows.Media.Devices.FocusSettings.DisableDriverFallback.get
		// Forced skipping of method Windows.Media.Devices.FocusSettings.DisableDriverFallback.set
	}
}
