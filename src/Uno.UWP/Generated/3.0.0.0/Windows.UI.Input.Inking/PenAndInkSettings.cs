// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Input.Inking
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class PenAndInkSettings
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal PenAndInkSettings()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string FontFamilyName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string PenAndInkSettings.FontFamilyName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20PenAndInkSettings.FontFamilyName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Input.Inking.HandwritingLineHeight HandwritingLineHeight
		{
			get
			{
				throw new global::System.NotImplementedException("The member HandwritingLineHeight PenAndInkSettings.HandwritingLineHeight is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=HandwritingLineHeight%20PenAndInkSettings.HandwritingLineHeight");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsHandwritingDirectlyIntoTextFieldEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PenAndInkSettings.IsHandwritingDirectlyIntoTextFieldEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PenAndInkSettings.IsHandwritingDirectlyIntoTextFieldEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTouchHandwritingEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PenAndInkSettings.IsTouchHandwritingEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PenAndInkSettings.IsTouchHandwritingEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Input.Inking.PenHandedness PenHandedness
		{
			get
			{
				throw new global::System.NotImplementedException("The member PenHandedness PenAndInkSettings.PenHandedness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PenHandedness%20PenAndInkSettings.PenHandedness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool UserConsentsToHandwritingTelemetryCollection
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool PenAndInkSettings.UserConsentsToHandwritingTelemetryCollection is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20PenAndInkSettings.UserConsentsToHandwritingTelemetryCollection");
			}
		}
#endif
		// Forced skipping of method Windows.UI.Input.Inking.PenAndInkSettings.IsHandwritingDirectlyIntoTextFieldEnabled.get
		// Forced skipping of method Windows.UI.Input.Inking.PenAndInkSettings.PenHandedness.get
		// Forced skipping of method Windows.UI.Input.Inking.PenAndInkSettings.HandwritingLineHeight.get
		// Forced skipping of method Windows.UI.Input.Inking.PenAndInkSettings.FontFamilyName.get
		// Forced skipping of method Windows.UI.Input.Inking.PenAndInkSettings.UserConsentsToHandwritingTelemetryCollection.get
		// Forced skipping of method Windows.UI.Input.Inking.PenAndInkSettings.IsTouchHandwritingEnabled.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetPenHandedness(global::Windows.UI.Input.Inking.PenHandedness value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Input.Inking.PenAndInkSettings", "void PenAndInkSettings.SetPenHandedness(PenHandedness value)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Input.Inking.PenAndInkSettings GetDefault()
		{
			throw new global::System.NotImplementedException("The member PenAndInkSettings PenAndInkSettings.GetDefault() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PenAndInkSettings%20PenAndInkSettings.GetDefault%28%29");
		}
#endif
	}
}
